### This file was autogenerated by Nexus 0.11.7
### Do not make changes to this file directly


type AggregateLeague {
  count: Int!
}

type AggregateNotificationSettings {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregatePackage {
  count: Int!
}

type AggregatePrediction {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type AuthPayload {
  token: String!
  user: User!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type League {
  id: ID!
  name: String!
  packages(after: String, before: String, first: Int, last: Int, orderBy: PackageOrderByInput, skip: Int, where: PackageWhereInput): [Package!]
  seasonEndDate: DateTime!
  sport: String!
  teams(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): [Team!]
}

type LeagueConnection {
  aggregate: AggregateLeague!
  edges: [LeagueEdge!]!
  pageInfo: PageInfo!
}

input LeagueCreateInput {
  id: ID
  name: String!
  packages: PackageCreateManyWithoutLeagueInput
  seasonEndDate: DateTime!
  sport: String!
  teams: TeamCreateManyWithoutLeagueInput
}

input LeagueCreateOneWithoutPackagesInput {
  connect: LeagueWhereUniqueInput
  create: LeagueCreateWithoutPackagesInput
}

input LeagueCreateOneWithoutTeamsInput {
  connect: LeagueWhereUniqueInput
  create: LeagueCreateWithoutTeamsInput
}

input LeagueCreateWithoutPackagesInput {
  id: ID
  name: String!
  seasonEndDate: DateTime!
  sport: String!
  teams: TeamCreateManyWithoutLeagueInput
}

input LeagueCreateWithoutTeamsInput {
  id: ID
  name: String!
  packages: PackageCreateManyWithoutLeagueInput
  seasonEndDate: DateTime!
  sport: String!
}

type LeagueEdge {
  cursor: String!
  node: League!
}

enum LeagueOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  seasonEndDate_ASC
  seasonEndDate_DESC
  sport_ASC
  sport_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input LeagueUpdateInput {
  name: String
  packages: PackageUpdateManyWithoutLeagueInput
  seasonEndDate: DateTime
  sport: String
  teams: TeamUpdateManyWithoutLeagueInput
}

input LeagueUpdateManyMutationInput {
  name: String
  seasonEndDate: DateTime
  sport: String
}

input LeagueUpdateOneRequiredWithoutPackagesInput {
  connect: LeagueWhereUniqueInput
  create: LeagueCreateWithoutPackagesInput
  update: LeagueUpdateWithoutPackagesDataInput
  upsert: LeagueUpsertWithoutPackagesInput
}

input LeagueUpdateOneRequiredWithoutTeamsInput {
  connect: LeagueWhereUniqueInput
  create: LeagueCreateWithoutTeamsInput
  update: LeagueUpdateWithoutTeamsDataInput
  upsert: LeagueUpsertWithoutTeamsInput
}

input LeagueUpdateWithoutPackagesDataInput {
  name: String
  seasonEndDate: DateTime
  sport: String
  teams: TeamUpdateManyWithoutLeagueInput
}

input LeagueUpdateWithoutTeamsDataInput {
  name: String
  packages: PackageUpdateManyWithoutLeagueInput
  seasonEndDate: DateTime
  sport: String
}

input LeagueUpsertWithoutPackagesInput {
  create: LeagueCreateWithoutPackagesInput!
  update: LeagueUpdateWithoutPackagesDataInput!
}

input LeagueUpsertWithoutTeamsInput {
  create: LeagueCreateWithoutTeamsInput!
  update: LeagueUpdateWithoutTeamsDataInput!
}

input LeagueWhereInput {
  AND: [LeagueWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [LeagueWhereInput!]
  OR: [LeagueWhereInput!]
  packages_every: PackageWhereInput
  packages_none: PackageWhereInput
  packages_some: PackageWhereInput
  seasonEndDate: DateTime
  seasonEndDate_gt: DateTime
  seasonEndDate_gte: DateTime
  seasonEndDate_in: [DateTime!]
  seasonEndDate_lt: DateTime
  seasonEndDate_lte: DateTime
  seasonEndDate_not: DateTime
  seasonEndDate_not_in: [DateTime!]
  sport: String
  sport_contains: String
  sport_ends_with: String
  sport_gt: String
  sport_gte: String
  sport_in: [String!]
  sport_lt: String
  sport_lte: String
  sport_not: String
  sport_not_contains: String
  sport_not_ends_with: String
  sport_not_in: [String!]
  sport_not_starts_with: String
  sport_starts_with: String
  teams_every: TeamWhereInput
  teams_none: TeamWhereInput
  teams_some: TeamWhereInput
}

input LeagueWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  addToCart(expireAt: String!, packageName: String!): [OrderItem!]!
  changePassword(newPassword: String!, oldPassword: String!): AuthPayload!
  createLeague(data: LeagueCreateInput!): League!
  createOrder(stripeToken: String!): Order!
  createPrediction(away: String!, home: String!, name: String!, packageName: String!, startDate: String!, winner: String!): Prediction!
  createTeam(data: TeamCreateInput!): Team!
  deleteLeague(where: LeagueWhereUniqueInput!): League
  deleteManyLeagues(where: LeagueWhereInput): BatchPayload!
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  deleteMe: User!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteTeam(where: TeamWhereUniqueInput!): Team
  emptyCart: BatchPayload!
  login(email: String, password: String!, phone: String): AuthPayload!
  removeFromCart(id: ID!): [OrderItem!]
  signup(email: String!, notificationSettings: NotificationSettingsCreateWithoutUserInput = {email: true, phone: false}, password: String!, phone: String!): AuthPayload!
  updateLeague(data: LeagueUpdateInput!, where: LeagueWhereUniqueInput!): League
  updateManyLeagues(data: LeagueUpdateManyMutationInput!, where: LeagueWhereInput): BatchPayload!
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  updatePrediction(
    id: ID!

    """The key of the winning team"""
    winner: String!
  ): Prediction!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  upsertLeague(create: LeagueCreateInput!, update: LeagueUpdateInput!, where: LeagueWhereUniqueInput!): League!
  upsertTeam(create: TeamCreateInput!, update: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team!
}

type NotificationSettings {
  email: Boolean!
  id: ID!
  phone: Boolean!
  user: User
}

type NotificationSettingsConnection {
  aggregate: AggregateNotificationSettings!
  edges: [NotificationSettingsEdge!]!
  pageInfo: PageInfo!
}

input NotificationSettingsCreateOneWithoutUserInput {
  connect: NotificationSettingsWhereUniqueInput
  create: NotificationSettingsCreateWithoutUserInput
}

input NotificationSettingsCreateWithoutUserInput {
  email: Boolean
  id: ID
  phone: Boolean
}

type NotificationSettingsEdge {
  cursor: String!
  node: NotificationSettings!
}

enum NotificationSettingsOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  phone_ASC
  phone_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input NotificationSettingsUpdateOneRequiredWithoutUserInput {
  connect: NotificationSettingsWhereUniqueInput
  create: NotificationSettingsCreateWithoutUserInput
  update: NotificationSettingsUpdateWithoutUserDataInput
  upsert: NotificationSettingsUpsertWithoutUserInput
}

input NotificationSettingsUpdateWithoutUserDataInput {
  email: Boolean
  phone: Boolean
}

input NotificationSettingsUpsertWithoutUserInput {
  create: NotificationSettingsCreateWithoutUserInput!
  update: NotificationSettingsUpdateWithoutUserDataInput!
}

input NotificationSettingsWhereInput {
  AND: [NotificationSettingsWhereInput!]
  email: Boolean
  email_not: Boolean
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [NotificationSettingsWhereInput!]
  OR: [NotificationSettingsWhereInput!]
  phone: Boolean
  phone_not: Boolean
  user: UserWhereInput
}

input NotificationSettingsWhereUniqueInput {
  id: ID
}

type Order {
  createdAt: DateTime!
  id: ID!
  items(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]
  owner: User!
  status: OrderStatus!
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
  updatedAt: DateTime!
}

type OrderConnection {
  aggregate: AggregateOrder!
  edges: [OrderEdge!]!
  pageInfo: PageInfo!
}

input OrderCreateManyWithoutOwnerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutOwnerInput!]
}

input OrderCreateOneWithoutItemsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutItemsInput
}

input OrderCreateWithoutItemsInput {
  id: ID
  owner: UserCreateOneWithoutOrdersInput!
  status: OrderStatus
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
}

input OrderCreateWithoutOwnerInput {
  id: ID
  items: OrderItemCreateManyWithoutOrderInput
  status: OrderStatus
  totalPrice: Float!
  totalRefunded: Float!
  totalTax: Float!
}

type OrderEdge {
  cursor: String!
  node: Order!
}

type OrderItem {
  expireAt: DateTime!
  id: ID!
  order: Order
  owner: User
  package: Package!
  price: Float!
}

type OrderItemConnection {
  aggregate: AggregateOrderItem!
  edges: [OrderItemEdge!]!
  pageInfo: PageInfo!
}

input OrderItemCreateManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOrderInput!]
}

input OrderItemCreateManyWithoutOwnerInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOwnerInput!]
}

input OrderItemCreateManyWithoutPackageInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutPackageInput!]
}

input OrderItemCreateWithoutOrderInput {
  expireAt: DateTime!
  id: ID
  owner: UserCreateOneWithoutCartInput
  package: PackageCreateOneWithoutOrderItemsInput!
}

input OrderItemCreateWithoutOwnerInput {
  expireAt: DateTime!
  id: ID
  order: OrderCreateOneWithoutItemsInput
  package: PackageCreateOneWithoutOrderItemsInput!
}

input OrderItemCreateWithoutPackageInput {
  expireAt: DateTime!
  id: ID
  order: OrderCreateOneWithoutItemsInput
  owner: UserCreateOneWithoutCartInput
}

type OrderItemEdge {
  cursor: String!
  node: OrderItem!
}

enum OrderItemOrderByInput {
  createdAt_ASC
  createdAt_DESC
  expireAt_ASC
  expireAt_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderItemScalarWhereInput {
  AND: [OrderItemScalarWhereInput!]
  expireAt: DateTime
  expireAt_gt: DateTime
  expireAt_gte: DateTime
  expireAt_in: [DateTime!]
  expireAt_lt: DateTime
  expireAt_lte: DateTime
  expireAt_not: DateTime
  expireAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
}

input OrderItemUpdateManyDataInput {
  expireAt: DateTime
}

input OrderItemUpdateManyWithoutOrderInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOrderInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
}

input OrderItemUpdateManyWithoutOwnerInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutOwnerInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOwnerInput!]
}

input OrderItemUpdateManyWithoutPackageInput {
  connect: [OrderItemWhereUniqueInput!]
  create: [OrderItemCreateWithoutPackageInput!]
  delete: [OrderItemWhereUniqueInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutPackageInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutPackageInput!]
}

input OrderItemUpdateManyWithWhereNestedInput {
  data: OrderItemUpdateManyDataInput!
  where: OrderItemScalarWhereInput!
}

input OrderItemUpdateWithoutOrderDataInput {
  expireAt: DateTime
  owner: UserUpdateOneWithoutCartInput
  package: PackageUpdateOneRequiredWithoutOrderItemsInput
}

input OrderItemUpdateWithoutOwnerDataInput {
  expireAt: DateTime
  order: OrderUpdateOneWithoutItemsInput
  package: PackageUpdateOneRequiredWithoutOrderItemsInput
}

input OrderItemUpdateWithoutPackageDataInput {
  expireAt: DateTime
  order: OrderUpdateOneWithoutItemsInput
  owner: UserUpdateOneWithoutCartInput
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  data: OrderItemUpdateWithoutOrderDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpdateWithWhereUniqueWithoutOwnerInput {
  data: OrderItemUpdateWithoutOwnerDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpdateWithWhereUniqueWithoutPackageInput {
  data: OrderItemUpdateWithoutPackageDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  create: OrderItemCreateWithoutOrderInput!
  update: OrderItemUpdateWithoutOrderDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOwnerInput {
  create: OrderItemCreateWithoutOwnerInput!
  update: OrderItemUpdateWithoutOwnerDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemUpsertWithWhereUniqueWithoutPackageInput {
  create: OrderItemCreateWithoutPackageInput!
  update: OrderItemUpdateWithoutPackageDataInput!
  where: OrderItemWhereUniqueInput!
}

input OrderItemWhereInput {
  AND: [OrderItemWhereInput!]
  expireAt: DateTime
  expireAt_gt: DateTime
  expireAt_gte: DateTime
  expireAt_in: [DateTime!]
  expireAt_lt: DateTime
  expireAt_lte: DateTime
  expireAt_not: DateTime
  expireAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  order: OrderWhereInput
  owner: UserWhereInput
  package: PackageWhereInput
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  status_ASC
  status_DESC
  totalPrice_ASC
  totalPrice_DESC
  totalRefunded_ASC
  totalRefunded_DESC
  totalTax_ASC
  totalTax_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  status: OrderStatus
  status_in: [OrderStatus!]
  status_not: OrderStatus
  status_not_in: [OrderStatus!]
  totalPrice: Float
  totalPrice_gt: Float
  totalPrice_gte: Float
  totalPrice_in: [Float!]
  totalPrice_lt: Float
  totalPrice_lte: Float
  totalPrice_not: Float
  totalPrice_not_in: [Float!]
  totalRefunded: Float
  totalRefunded_gt: Float
  totalRefunded_gte: Float
  totalRefunded_in: [Float!]
  totalRefunded_lt: Float
  totalRefunded_lte: Float
  totalRefunded_not: Float
  totalRefunded_not_in: [Float!]
  totalTax: Float
  totalTax_gt: Float
  totalTax_gte: Float
  totalTax_in: [Float!]
  totalTax_lt: Float
  totalTax_lte: Float
  totalTax_not: Float
  totalTax_not_in: [Float!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

enum OrderStatus {
  FAILED
  PAID
  PREPARED
  SUBMITTED
}

input OrderUpdateManyDataInput {
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
}

input OrderUpdateManyWithoutOwnerInput {
  connect: [OrderWhereUniqueInput!]
  create: [OrderCreateWithoutOwnerInput!]
  delete: [OrderWhereUniqueInput!]
  deleteMany: [OrderScalarWhereInput!]
  disconnect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutOwnerInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  data: OrderUpdateManyDataInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateOneWithoutItemsInput {
  connect: OrderWhereUniqueInput
  create: OrderCreateWithoutItemsInput
  delete: Boolean
  disconnect: Boolean
  update: OrderUpdateWithoutItemsDataInput
  upsert: OrderUpsertWithoutItemsInput
}

input OrderUpdateWithoutItemsDataInput {
  owner: UserUpdateOneRequiredWithoutOrdersInput
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
}

input OrderUpdateWithoutOwnerDataInput {
  items: OrderItemUpdateManyWithoutOrderInput
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
  totalTax: Float
}

input OrderUpdateWithWhereUniqueWithoutOwnerInput {
  data: OrderUpdateWithoutOwnerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutItemsInput {
  create: OrderCreateWithoutItemsInput!
  update: OrderUpdateWithoutItemsDataInput!
}

input OrderUpsertWithWhereUniqueWithoutOwnerInput {
  create: OrderCreateWithoutOwnerInput!
  update: OrderUpdateWithoutOwnerDataInput!
  where: OrderWhereUniqueInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  items_every: OrderItemWhereInput
  items_none: OrderItemWhereInput
  items_some: OrderItemWhereInput
  NOT: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  owner: UserWhereInput
  status: OrderStatus
  status_in: [OrderStatus!]
  status_not: OrderStatus
  status_not_in: [OrderStatus!]
  totalPrice: Float
  totalPrice_gt: Float
  totalPrice_gte: Float
  totalPrice_in: [Float!]
  totalPrice_lt: Float
  totalPrice_lte: Float
  totalPrice_not: Float
  totalPrice_not_in: [Float!]
  totalRefunded: Float
  totalRefunded_gt: Float
  totalRefunded_gte: Float
  totalRefunded_in: [Float!]
  totalRefunded_lt: Float
  totalRefunded_lte: Float
  totalRefunded_not: Float
  totalRefunded_not_in: [Float!]
  totalTax: Float
  totalTax_gt: Float
  totalTax_gte: Float
  totalTax_in: [Float!]
  totalTax_lt: Float
  totalTax_lte: Float
  totalTax_not: Float
  totalTax_not_in: [Float!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input OrderWhereUniqueInput {
  id: ID
}

type Package {
  description: String
  id: ID!
  image: String
  league: League!
  name: String!
  orderItems(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]
  predictions(after: String, before: String, first: Int, last: Int, orderBy: PredictionOrderByInput, skip: Int, where: PredictionWhereInput): [Prediction!]
  price(toDate: DateTime): Float!
}

type PackageConnection {
  aggregate: AggregatePackage!
  edges: [PackageEdge!]!
  pageInfo: PageInfo!
}

input PackageCreateManyWithoutLeagueInput {
  connect: [PackageWhereUniqueInput!]
  create: [PackageCreateWithoutLeagueInput!]
}

input PackageCreateOneWithoutOrderItemsInput {
  connect: PackageWhereUniqueInput
  create: PackageCreateWithoutOrderItemsInput
}

input PackageCreateWithoutLeagueInput {
  description: String
  id: ID
  image: String
  name: String!
  orderItems: OrderItemCreateManyWithoutPackageInput
  predictions: PredictionCreateManyWithoutPackageInput
  price: Float!
}

input PackageCreateWithoutOrderItemsInput {
  description: String
  id: ID
  image: String
  league: LeagueCreateOneWithoutPackagesInput!
  name: String!
  predictions: PredictionCreateManyWithoutPackageInput
  price: Float!
}

type PackageEdge {
  cursor: String!
  node: Package!
}

enum PackageOrderByInput {
  createdAt_ASC
  createdAt_DESC
  description_ASC
  description_DESC
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  name_ASC
  name_DESC
  price_ASC
  price_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PackageScalarWhereInput {
  AND: [PackageScalarWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PackageScalarWhereInput!]
  OR: [PackageScalarWhereInput!]
  price: Float
  price_gt: Float
  price_gte: Float
  price_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_not: Float
  price_not_in: [Float!]
}

input PackageUpdateManyDataInput {
  description: String
  image: String
  name: String
  price: Float
}

input PackageUpdateManyWithoutLeagueInput {
  connect: [PackageWhereUniqueInput!]
  create: [PackageCreateWithoutLeagueInput!]
  delete: [PackageWhereUniqueInput!]
  deleteMany: [PackageScalarWhereInput!]
  disconnect: [PackageWhereUniqueInput!]
  set: [PackageWhereUniqueInput!]
  update: [PackageUpdateWithWhereUniqueWithoutLeagueInput!]
  updateMany: [PackageUpdateManyWithWhereNestedInput!]
  upsert: [PackageUpsertWithWhereUniqueWithoutLeagueInput!]
}

input PackageUpdateManyWithWhereNestedInput {
  data: PackageUpdateManyDataInput!
  where: PackageScalarWhereInput!
}

input PackageUpdateOneRequiredWithoutOrderItemsInput {
  connect: PackageWhereUniqueInput
  create: PackageCreateWithoutOrderItemsInput
  update: PackageUpdateWithoutOrderItemsDataInput
  upsert: PackageUpsertWithoutOrderItemsInput
}

input PackageUpdateWithoutLeagueDataInput {
  description: String
  image: String
  name: String
  orderItems: OrderItemUpdateManyWithoutPackageInput
  predictions: PredictionUpdateManyWithoutPackageInput
  price: Float
}

input PackageUpdateWithoutOrderItemsDataInput {
  description: String
  image: String
  league: LeagueUpdateOneRequiredWithoutPackagesInput
  name: String
  predictions: PredictionUpdateManyWithoutPackageInput
  price: Float
}

input PackageUpdateWithWhereUniqueWithoutLeagueInput {
  data: PackageUpdateWithoutLeagueDataInput!
  where: PackageWhereUniqueInput!
}

input PackageUpsertWithoutOrderItemsInput {
  create: PackageCreateWithoutOrderItemsInput!
  update: PackageUpdateWithoutOrderItemsDataInput!
}

input PackageUpsertWithWhereUniqueWithoutLeagueInput {
  create: PackageCreateWithoutLeagueInput!
  update: PackageUpdateWithoutLeagueDataInput!
  where: PackageWhereUniqueInput!
}

input PackageWhereInput {
  AND: [PackageWhereInput!]
  description: String
  description_contains: String
  description_ends_with: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_ends_with: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  image: String
  image_contains: String
  image_ends_with: String
  image_gt: String
  image_gte: String
  image_in: [String!]
  image_lt: String
  image_lte: String
  image_not: String
  image_not_contains: String
  image_not_ends_with: String
  image_not_in: [String!]
  image_not_starts_with: String
  image_starts_with: String
  league: LeagueWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PackageWhereInput!]
  OR: [PackageWhereInput!]
  orderItems_every: OrderItemWhereInput
  orderItems_none: OrderItemWhereInput
  orderItems_some: OrderItemWhereInput
  predictions_every: PredictionWhereInput
  predictions_none: PredictionWhereInput
  predictions_some: PredictionWhereInput
  price: Float
  price_gt: Float
  price_gte: Float
  price_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_not: Float
  price_not_in: [Float!]
}

input PackageWhereUniqueInput {
  id: ID
  name: String
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
}

type Prediction {
  away: Team!
  createdAt: DateTime!
  home: Team!
  id: ID!
  name: String!
  package: Package!
  startDate: DateTime!
  updatedAt: DateTime!
  winner: Team!
}

type PredictionConnection {
  aggregate: AggregatePrediction!
  edges: [PredictionEdge!]!
  pageInfo: PageInfo!
}

input PredictionCreateManyWithoutPackageInput {
  connect: [PredictionWhereUniqueInput!]
  create: [PredictionCreateWithoutPackageInput!]
}

input PredictionCreateWithoutPackageInput {
  away: TeamCreateOneInput!
  home: TeamCreateOneInput!
  id: ID
  name: String!
  startDate: DateTime!
  winner: TeamCreateOneInput!
}

type PredictionEdge {
  cursor: String!
  node: Prediction!
}

enum PredictionOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  startDate_ASC
  startDate_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input PredictionScalarWhereInput {
  AND: [PredictionScalarWhereInput!]
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PredictionScalarWhereInput!]
  OR: [PredictionScalarWhereInput!]
  startDate: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  startDate_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_not: DateTime
  startDate_not_in: [DateTime!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
}

input PredictionUpdateManyDataInput {
  name: String
  startDate: DateTime
}

input PredictionUpdateManyWithoutPackageInput {
  connect: [PredictionWhereUniqueInput!]
  create: [PredictionCreateWithoutPackageInput!]
  delete: [PredictionWhereUniqueInput!]
  deleteMany: [PredictionScalarWhereInput!]
  disconnect: [PredictionWhereUniqueInput!]
  set: [PredictionWhereUniqueInput!]
  update: [PredictionUpdateWithWhereUniqueWithoutPackageInput!]
  updateMany: [PredictionUpdateManyWithWhereNestedInput!]
  upsert: [PredictionUpsertWithWhereUniqueWithoutPackageInput!]
}

input PredictionUpdateManyWithWhereNestedInput {
  data: PredictionUpdateManyDataInput!
  where: PredictionScalarWhereInput!
}

input PredictionUpdateWithoutPackageDataInput {
  away: TeamUpdateOneRequiredInput
  home: TeamUpdateOneRequiredInput
  name: String
  startDate: DateTime
  winner: TeamUpdateOneRequiredInput
}

input PredictionUpdateWithWhereUniqueWithoutPackageInput {
  data: PredictionUpdateWithoutPackageDataInput!
  where: PredictionWhereUniqueInput!
}

input PredictionUpsertWithWhereUniqueWithoutPackageInput {
  create: PredictionCreateWithoutPackageInput!
  update: PredictionUpdateWithoutPackageDataInput!
  where: PredictionWhereUniqueInput!
}

input PredictionWhereInput {
  AND: [PredictionWhereInput!]
  away: TeamWhereInput
  createdAt: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  createdAt_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_not: DateTime
  createdAt_not_in: [DateTime!]
  home: TeamWhereInput
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [PredictionWhereInput!]
  OR: [PredictionWhereInput!]
  package: PackageWhereInput
  startDate: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  startDate_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_not: DateTime
  startDate_not_in: [DateTime!]
  updatedAt: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_not: DateTime
  updatedAt_not_in: [DateTime!]
  winner: TeamWhereInput
}

input PredictionWhereUniqueInput {
  id: ID
}

type Query {
  league(where: LeagueWhereUniqueInput!): League
  leagues(after: String, before: String, first: Int, last: Int, orderBy: LeagueOrderByInput, skip: Int, where: LeagueWhereInput): [League!]!
  leaguesConnection(after: String, before: String, first: Int, last: Int, orderBy: LeagueOrderByInput, skip: Int, where: LeagueWhereInput): LeagueConnection!
  me: User
  notificationSettings(where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  notificationSettingses(after: String, before: String, first: Int, last: Int, orderBy: NotificationSettingsOrderByInput, skip: Int, where: NotificationSettingsWhereInput): [NotificationSettings!]!
  notificationSettingsesConnection(after: String, before: String, first: Int, last: Int, orderBy: NotificationSettingsOrderByInput, skip: Int, where: NotificationSettingsWhereInput): NotificationSettingsConnection!
  order(where: OrderWhereUniqueInput!): Order
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]!
  orderItemsConnection(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): OrderItemConnection!
  orders(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): [Order!]!
  ordersConnection(after: String, before: String, first: Int, last: Int, orderBy: OrderOrderByInput, skip: Int, where: OrderWhereInput): OrderConnection!
  package(where: PackageWhereUniqueInput!): Package
  packages(after: String, before: String, first: Int, last: Int, orderBy: PackageOrderByInput, skip: Int, where: PackageWhereInput): [Package!]!
  packagesConnection(after: String, before: String, first: Int, last: Int, orderBy: PackageOrderByInput, skip: Int, where: PackageWhereInput): PackageConnection!
  prediction(where: PredictionWhereUniqueInput!): Prediction
  predictions(after: String, before: String, first: Int, last: Int, orderBy: PredictionOrderByInput, skip: Int, where: PredictionWhereInput): [Prediction!]!
  predictionsConnection(after: String, before: String, first: Int, last: Int, orderBy: PredictionOrderByInput, skip: Int, where: PredictionWhereInput): PredictionConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): [Team!]!
  teamsConnection(after: String, before: String, first: Int, last: Int, orderBy: TeamOrderByInput, skip: Int, where: TeamWhereInput): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): [User!]!
  usersConnection(after: String, before: String, first: Int, last: Int, orderBy: UserOrderByInput, skip: Int, where: UserWhereInput): UserConnection!
}

enum Role {
  ADMIN
  EDITOR
  USER
}

type Team {
  id: ID!
  key: String!
  league: League!
  name: String!
}

type TeamConnection {
  aggregate: AggregateTeam!
  edges: [TeamEdge!]!
  pageInfo: PageInfo!
}

input TeamCreateInput {
  id: ID
  key: String!
  league: LeagueCreateOneWithoutTeamsInput!
  name: String!
}

input TeamCreateManyWithoutLeagueInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutLeagueInput!]
}

input TeamCreateOneInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateInput
}

input TeamCreateWithoutLeagueInput {
  id: ID
  key: String!
  name: String!
}

type TeamEdge {
  cursor: String!
  node: Team!
}

enum TeamOrderByInput {
  createdAt_ASC
  createdAt_DESC
  id_ASC
  id_DESC
  key_ASC
  key_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input TeamScalarWhereInput {
  AND: [TeamScalarWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
}

input TeamUpdateDataInput {
  key: String
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  name: String
}

input TeamUpdateInput {
  key: String
  league: LeagueUpdateOneRequiredWithoutTeamsInput
  name: String
}

input TeamUpdateManyDataInput {
  key: String
  name: String
}

input TeamUpdateManyMutationInput {
  key: String
  name: String
}

input TeamUpdateManyWithoutLeagueInput {
  connect: [TeamWhereUniqueInput!]
  create: [TeamCreateWithoutLeagueInput!]
  delete: [TeamWhereUniqueInput!]
  deleteMany: [TeamScalarWhereInput!]
  disconnect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutLeagueInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutLeagueInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  data: TeamUpdateManyDataInput!
  where: TeamScalarWhereInput!
}

input TeamUpdateOneRequiredInput {
  connect: TeamWhereUniqueInput
  create: TeamCreateInput
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
}

input TeamUpdateWithoutLeagueDataInput {
  key: String
  name: String
}

input TeamUpdateWithWhereUniqueWithoutLeagueInput {
  data: TeamUpdateWithoutLeagueDataInput!
  where: TeamWhereUniqueInput!
}

input TeamUpsertNestedInput {
  create: TeamCreateInput!
  update: TeamUpdateDataInput!
}

input TeamUpsertWithWhereUniqueWithoutLeagueInput {
  create: TeamCreateWithoutLeagueInput!
  update: TeamUpdateWithoutLeagueDataInput!
  where: TeamWhereUniqueInput!
}

input TeamWhereInput {
  AND: [TeamWhereInput!]
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  key: String
  key_contains: String
  key_ends_with: String
  key_gt: String
  key_gte: String
  key_in: [String!]
  key_lt: String
  key_lte: String
  key_not: String
  key_not_contains: String
  key_not_ends_with: String
  key_not_in: [String!]
  key_not_starts_with: String
  key_starts_with: String
  league: LeagueWhereInput
  name: String
  name_contains: String
  name_ends_with: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_ends_with: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_starts_with: String
  NOT: [TeamWhereInput!]
  OR: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  key: String
  name: String
}

type User {
  cart(after: String, before: String, first: Int, last: Int, orderBy: OrderItemOrderByInput, skip: Int, where: OrderItemWhereInput): [OrderItem!]
  email: String!
  id: ID!
  notificationSettings: NotificationSettings!
  phone: String!
  role: Role
}

type UserConnection {
  aggregate: AggregateUser!
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

input UserCreateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCartInput
}

input UserCreateOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
}

input UserCreateWithoutCartInput {
  email: String!
  id: ID
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput!
  orders: OrderCreateManyWithoutOwnerInput
  password: String!
  phone: String!
  role: Role
}

input UserCreateWithoutOrdersInput {
  cart: OrderItemCreateManyWithoutOwnerInput
  email: String!
  id: ID
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput!
  password: String!
  phone: String!
  role: Role
}

type UserEdge {
  cursor: String!
  node: User!
}

enum UserOrderByInput {
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  id_ASC
  id_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  role_ASC
  role_DESC
  updatedAt_ASC
  updatedAt_DESC
}

input UserUpdateOneRequiredWithoutOrdersInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateOneWithoutCartInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutCartInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateWithoutCartDataInput {
  email: String
  notificationSettings: NotificationSettingsUpdateOneRequiredWithoutUserInput
  orders: OrderUpdateManyWithoutOwnerInput
  password: String
  phone: String
  role: Role
}

input UserUpdateWithoutOrdersDataInput {
  cart: OrderItemUpdateManyWithoutOwnerInput
  email: String
  notificationSettings: NotificationSettingsUpdateOneRequiredWithoutUserInput
  password: String
  phone: String
  role: Role
}

input UserUpsertWithoutCartInput {
  create: UserCreateWithoutCartInput!
  update: UserUpdateWithoutCartDataInput!
}

input UserUpsertWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput!
  update: UserUpdateWithoutOrdersDataInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  cart_every: OrderItemWhereInput
  cart_none: OrderItemWhereInput
  cart_some: OrderItemWhereInput
  email: String
  email_contains: String
  email_ends_with: String
  email_gt: String
  email_gte: String
  email_in: [String!]
  email_lt: String
  email_lte: String
  email_not: String
  email_not_contains: String
  email_not_ends_with: String
  email_not_in: [String!]
  email_not_starts_with: String
  email_starts_with: String
  id: ID
  id_contains: ID
  id_ends_with: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_contains: ID
  id_not_ends_with: ID
  id_not_in: [ID!]
  id_not_starts_with: ID
  id_starts_with: ID
  NOT: [UserWhereInput!]
  notificationSettings: NotificationSettingsWhereInput
  OR: [UserWhereInput!]
  orders_every: OrderWhereInput
  orders_none: OrderWhereInput
  orders_some: OrderWhereInput
  password: String
  password_contains: String
  password_ends_with: String
  password_gt: String
  password_gte: String
  password_in: [String!]
  password_lt: String
  password_lte: String
  password_not: String
  password_not_contains: String
  password_not_ends_with: String
  password_not_in: [String!]
  password_not_starts_with: String
  password_starts_with: String
  phone: String
  phone_contains: String
  phone_ends_with: String
  phone_gt: String
  phone_gte: String
  phone_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_not: String
  phone_not_contains: String
  phone_not_ends_with: String
  phone_not_in: [String!]
  phone_not_starts_with: String
  phone_starts_with: String
  role: Role
  role_in: [Role!]
  role_not: Role
  role_not_in: [Role!]
}

input UserWhereUniqueInput {
  email: String
  id: ID
  phone: String
}
