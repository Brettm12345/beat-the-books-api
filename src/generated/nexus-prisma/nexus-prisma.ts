/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      League: LeagueObject
      Package: PackageObject
      OrderItem: OrderItemObject
      User: UserObject
      Order: OrderObject
      NotificationSettings: NotificationSettingsObject
      Prediction: PredictionObject
      Team: TeamObject
      LeagueConnection: LeagueConnectionObject
      PageInfo: PageInfoObject
      LeagueEdge: LeagueEdgeObject
      AggregateLeague: AggregateLeagueObject
      TeamConnection: TeamConnectionObject
      TeamEdge: TeamEdgeObject
      AggregateTeam: AggregateTeamObject
      PackageConnection: PackageConnectionObject
      PackageEdge: PackageEdgeObject
      AggregatePackage: AggregatePackageObject
      OrderConnection: OrderConnectionObject
      OrderEdge: OrderEdgeObject
      AggregateOrder: AggregateOrderObject
      OrderItemConnection: OrderItemConnectionObject
      OrderItemEdge: OrderItemEdgeObject
      AggregateOrderItem: AggregateOrderItemObject
      UserConnection: UserConnectionObject
      UserEdge: UserEdgeObject
      AggregateUser: AggregateUserObject
      NotificationSettingsConnection: NotificationSettingsConnectionObject
      NotificationSettingsEdge: NotificationSettingsEdgeObject
      AggregateNotificationSettings: AggregateNotificationSettingsObject
      PredictionConnection: PredictionConnectionObject
      PredictionEdge: PredictionEdgeObject
      AggregatePrediction: AggregatePredictionObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      LeagueSubscriptionPayload: LeagueSubscriptionPayloadObject
      LeaguePreviousValues: LeaguePreviousValuesObject
      TeamSubscriptionPayload: TeamSubscriptionPayloadObject
      TeamPreviousValues: TeamPreviousValuesObject
      PackageSubscriptionPayload: PackageSubscriptionPayloadObject
      PackagePreviousValues: PackagePreviousValuesObject
      OrderSubscriptionPayload: OrderSubscriptionPayloadObject
      OrderPreviousValues: OrderPreviousValuesObject
      OrderItemSubscriptionPayload: OrderItemSubscriptionPayloadObject
      OrderItemPreviousValues: OrderItemPreviousValuesObject
      UserSubscriptionPayload: UserSubscriptionPayloadObject
      UserPreviousValues: UserPreviousValuesObject
      NotificationSettingsSubscriptionPayload: NotificationSettingsSubscriptionPayloadObject
      NotificationSettingsPreviousValues: NotificationSettingsPreviousValuesObject
      PredictionSubscriptionPayload: PredictionSubscriptionPayloadObject
      PredictionPreviousValues: PredictionPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      League: LeagueFieldDetails
      Package: PackageFieldDetails
      OrderItem: OrderItemFieldDetails
      User: UserFieldDetails
      Order: OrderFieldDetails
      NotificationSettings: NotificationSettingsFieldDetails
      Prediction: PredictionFieldDetails
      Team: TeamFieldDetails
      LeagueConnection: LeagueConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      LeagueEdge: LeagueEdgeFieldDetails
      AggregateLeague: AggregateLeagueFieldDetails
      TeamConnection: TeamConnectionFieldDetails
      TeamEdge: TeamEdgeFieldDetails
      AggregateTeam: AggregateTeamFieldDetails
      PackageConnection: PackageConnectionFieldDetails
      PackageEdge: PackageEdgeFieldDetails
      AggregatePackage: AggregatePackageFieldDetails
      OrderConnection: OrderConnectionFieldDetails
      OrderEdge: OrderEdgeFieldDetails
      AggregateOrder: AggregateOrderFieldDetails
      OrderItemConnection: OrderItemConnectionFieldDetails
      OrderItemEdge: OrderItemEdgeFieldDetails
      AggregateOrderItem: AggregateOrderItemFieldDetails
      UserConnection: UserConnectionFieldDetails
      UserEdge: UserEdgeFieldDetails
      AggregateUser: AggregateUserFieldDetails
      NotificationSettingsConnection: NotificationSettingsConnectionFieldDetails
      NotificationSettingsEdge: NotificationSettingsEdgeFieldDetails
      AggregateNotificationSettings: AggregateNotificationSettingsFieldDetails
      PredictionConnection: PredictionConnectionFieldDetails
      PredictionEdge: PredictionEdgeFieldDetails
      AggregatePrediction: AggregatePredictionFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      LeagueSubscriptionPayload: LeagueSubscriptionPayloadFieldDetails
      LeaguePreviousValues: LeaguePreviousValuesFieldDetails
      TeamSubscriptionPayload: TeamSubscriptionPayloadFieldDetails
      TeamPreviousValues: TeamPreviousValuesFieldDetails
      PackageSubscriptionPayload: PackageSubscriptionPayloadFieldDetails
      PackagePreviousValues: PackagePreviousValuesFieldDetails
      OrderSubscriptionPayload: OrderSubscriptionPayloadFieldDetails
      OrderPreviousValues: OrderPreviousValuesFieldDetails
      OrderItemSubscriptionPayload: OrderItemSubscriptionPayloadFieldDetails
      OrderItemPreviousValues: OrderItemPreviousValuesFieldDetails
      UserSubscriptionPayload: UserSubscriptionPayloadFieldDetails
      UserPreviousValues: UserPreviousValuesFieldDetails
      NotificationSettingsSubscriptionPayload: NotificationSettingsSubscriptionPayloadFieldDetails
      NotificationSettingsPreviousValues: NotificationSettingsPreviousValuesFieldDetails
      PredictionSubscriptionPayload: PredictionSubscriptionPayloadFieldDetails
      PredictionPreviousValues: PredictionPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      LeagueWhereUniqueInput: LeagueWhereUniqueInputInputObject
      PackageWhereInput: PackageWhereInputInputObject
      LeagueWhereInput: LeagueWhereInputInputObject
      TeamWhereInput: TeamWhereInputInputObject
      OrderItemWhereInput: OrderItemWhereInputInputObject
      UserWhereInput: UserWhereInputInputObject
      OrderWhereInput: OrderWhereInputInputObject
      NotificationSettingsWhereInput: NotificationSettingsWhereInputInputObject
      PredictionWhereInput: PredictionWhereInputInputObject
      TeamWhereUniqueInput: TeamWhereUniqueInputInputObject
      PackageWhereUniqueInput: PackageWhereUniqueInputInputObject
      OrderWhereUniqueInput: OrderWhereUniqueInputInputObject
      OrderItemWhereUniqueInput: OrderItemWhereUniqueInputInputObject
      UserWhereUniqueInput: UserWhereUniqueInputInputObject
      NotificationSettingsWhereUniqueInput: NotificationSettingsWhereUniqueInputInputObject
      PredictionWhereUniqueInput: PredictionWhereUniqueInputInputObject
      LeagueCreateInput: LeagueCreateInputInputObject
      PackageCreateManyWithoutLeagueInput: PackageCreateManyWithoutLeagueInputInputObject
      PackageCreateWithoutLeagueInput: PackageCreateWithoutLeagueInputInputObject
      OrderItemCreateManyWithoutPackageInput: OrderItemCreateManyWithoutPackageInputInputObject
      OrderItemCreateWithoutPackageInput: OrderItemCreateWithoutPackageInputInputObject
      UserCreateOneWithoutCartInput: UserCreateOneWithoutCartInputInputObject
      UserCreateWithoutCartInput: UserCreateWithoutCartInputInputObject
      OrderCreateManyWithoutOwnerInput: OrderCreateManyWithoutOwnerInputInputObject
      OrderCreateWithoutOwnerInput: OrderCreateWithoutOwnerInputInputObject
      OrderItemCreateManyWithoutOrderInput: OrderItemCreateManyWithoutOrderInputInputObject
      OrderItemCreateWithoutOrderInput: OrderItemCreateWithoutOrderInputInputObject
      PackageCreateOneWithoutOrderItemsInput: PackageCreateOneWithoutOrderItemsInputInputObject
      PackageCreateWithoutOrderItemsInput: PackageCreateWithoutOrderItemsInputInputObject
      LeagueCreateOneWithoutPackagesInput: LeagueCreateOneWithoutPackagesInputInputObject
      LeagueCreateWithoutPackagesInput: LeagueCreateWithoutPackagesInputInputObject
      TeamCreateManyWithoutLeagueInput: TeamCreateManyWithoutLeagueInputInputObject
      TeamCreateWithoutLeagueInput: TeamCreateWithoutLeagueInputInputObject
      PredictionCreateManyWithoutPackageInput: PredictionCreateManyWithoutPackageInputInputObject
      PredictionCreateWithoutPackageInput: PredictionCreateWithoutPackageInputInputObject
      TeamCreateOneInput: TeamCreateOneInputInputObject
      TeamCreateInput: TeamCreateInputInputObject
      LeagueCreateOneWithoutTeamsInput: LeagueCreateOneWithoutTeamsInputInputObject
      LeagueCreateWithoutTeamsInput: LeagueCreateWithoutTeamsInputInputObject
      NotificationSettingsCreateOneWithoutUserInput: NotificationSettingsCreateOneWithoutUserInputInputObject
      NotificationSettingsCreateWithoutUserInput: NotificationSettingsCreateWithoutUserInputInputObject
      OrderCreateOneWithoutItemsInput: OrderCreateOneWithoutItemsInputInputObject
      OrderCreateWithoutItemsInput: OrderCreateWithoutItemsInputInputObject
      UserCreateOneWithoutOrdersInput: UserCreateOneWithoutOrdersInputInputObject
      UserCreateWithoutOrdersInput: UserCreateWithoutOrdersInputInputObject
      OrderItemCreateManyWithoutOwnerInput: OrderItemCreateManyWithoutOwnerInputInputObject
      OrderItemCreateWithoutOwnerInput: OrderItemCreateWithoutOwnerInputInputObject
      LeagueUpdateInput: LeagueUpdateInputInputObject
      PackageUpdateManyWithoutLeagueInput: PackageUpdateManyWithoutLeagueInputInputObject
      PackageUpdateWithWhereUniqueWithoutLeagueInput: PackageUpdateWithWhereUniqueWithoutLeagueInputInputObject
      PackageUpdateWithoutLeagueDataInput: PackageUpdateWithoutLeagueDataInputInputObject
      OrderItemUpdateManyWithoutPackageInput: OrderItemUpdateManyWithoutPackageInputInputObject
      OrderItemUpdateWithWhereUniqueWithoutPackageInput: OrderItemUpdateWithWhereUniqueWithoutPackageInputInputObject
      OrderItemUpdateWithoutPackageDataInput: OrderItemUpdateWithoutPackageDataInputInputObject
      UserUpdateOneWithoutCartInput: UserUpdateOneWithoutCartInputInputObject
      UserUpdateWithoutCartDataInput: UserUpdateWithoutCartDataInputInputObject
      OrderUpdateManyWithoutOwnerInput: OrderUpdateManyWithoutOwnerInputInputObject
      OrderUpdateWithWhereUniqueWithoutOwnerInput: OrderUpdateWithWhereUniqueWithoutOwnerInputInputObject
      OrderUpdateWithoutOwnerDataInput: OrderUpdateWithoutOwnerDataInputInputObject
      OrderItemUpdateManyWithoutOrderInput: OrderItemUpdateManyWithoutOrderInputInputObject
      OrderItemUpdateWithWhereUniqueWithoutOrderInput: OrderItemUpdateWithWhereUniqueWithoutOrderInputInputObject
      OrderItemUpdateWithoutOrderDataInput: OrderItemUpdateWithoutOrderDataInputInputObject
      PackageUpdateOneRequiredWithoutOrderItemsInput: PackageUpdateOneRequiredWithoutOrderItemsInputInputObject
      PackageUpdateWithoutOrderItemsDataInput: PackageUpdateWithoutOrderItemsDataInputInputObject
      LeagueUpdateOneRequiredWithoutPackagesInput: LeagueUpdateOneRequiredWithoutPackagesInputInputObject
      LeagueUpdateWithoutPackagesDataInput: LeagueUpdateWithoutPackagesDataInputInputObject
      TeamUpdateManyWithoutLeagueInput: TeamUpdateManyWithoutLeagueInputInputObject
      TeamUpdateWithWhereUniqueWithoutLeagueInput: TeamUpdateWithWhereUniqueWithoutLeagueInputInputObject
      TeamUpdateWithoutLeagueDataInput: TeamUpdateWithoutLeagueDataInputInputObject
      TeamUpsertWithWhereUniqueWithoutLeagueInput: TeamUpsertWithWhereUniqueWithoutLeagueInputInputObject
      TeamScalarWhereInput: TeamScalarWhereInputInputObject
      TeamUpdateManyWithWhereNestedInput: TeamUpdateManyWithWhereNestedInputInputObject
      TeamUpdateManyDataInput: TeamUpdateManyDataInputInputObject
      LeagueUpsertWithoutPackagesInput: LeagueUpsertWithoutPackagesInputInputObject
      PredictionUpdateManyWithoutPackageInput: PredictionUpdateManyWithoutPackageInputInputObject
      PredictionUpdateWithWhereUniqueWithoutPackageInput: PredictionUpdateWithWhereUniqueWithoutPackageInputInputObject
      PredictionUpdateWithoutPackageDataInput: PredictionUpdateWithoutPackageDataInputInputObject
      TeamUpdateOneRequiredInput: TeamUpdateOneRequiredInputInputObject
      TeamUpdateDataInput: TeamUpdateDataInputInputObject
      LeagueUpdateOneRequiredWithoutTeamsInput: LeagueUpdateOneRequiredWithoutTeamsInputInputObject
      LeagueUpdateWithoutTeamsDataInput: LeagueUpdateWithoutTeamsDataInputInputObject
      LeagueUpsertWithoutTeamsInput: LeagueUpsertWithoutTeamsInputInputObject
      TeamUpsertNestedInput: TeamUpsertNestedInputInputObject
      PredictionUpsertWithWhereUniqueWithoutPackageInput: PredictionUpsertWithWhereUniqueWithoutPackageInputInputObject
      PredictionScalarWhereInput: PredictionScalarWhereInputInputObject
      PredictionUpdateManyWithWhereNestedInput: PredictionUpdateManyWithWhereNestedInputInputObject
      PredictionUpdateManyDataInput: PredictionUpdateManyDataInputInputObject
      PackageUpsertWithoutOrderItemsInput: PackageUpsertWithoutOrderItemsInputInputObject
      OrderItemUpsertWithWhereUniqueWithoutOrderInput: OrderItemUpsertWithWhereUniqueWithoutOrderInputInputObject
      OrderItemScalarWhereInput: OrderItemScalarWhereInputInputObject
      OrderItemUpdateManyWithWhereNestedInput: OrderItemUpdateManyWithWhereNestedInputInputObject
      OrderItemUpdateManyDataInput: OrderItemUpdateManyDataInputInputObject
      OrderUpsertWithWhereUniqueWithoutOwnerInput: OrderUpsertWithWhereUniqueWithoutOwnerInputInputObject
      OrderScalarWhereInput: OrderScalarWhereInputInputObject
      OrderUpdateManyWithWhereNestedInput: OrderUpdateManyWithWhereNestedInputInputObject
      OrderUpdateManyDataInput: OrderUpdateManyDataInputInputObject
      NotificationSettingsUpdateOneRequiredWithoutUserInput: NotificationSettingsUpdateOneRequiredWithoutUserInputInputObject
      NotificationSettingsUpdateWithoutUserDataInput: NotificationSettingsUpdateWithoutUserDataInputInputObject
      NotificationSettingsUpsertWithoutUserInput: NotificationSettingsUpsertWithoutUserInputInputObject
      UserUpsertWithoutCartInput: UserUpsertWithoutCartInputInputObject
      OrderUpdateOneWithoutItemsInput: OrderUpdateOneWithoutItemsInputInputObject
      OrderUpdateWithoutItemsDataInput: OrderUpdateWithoutItemsDataInputInputObject
      UserUpdateOneRequiredWithoutOrdersInput: UserUpdateOneRequiredWithoutOrdersInputInputObject
      UserUpdateWithoutOrdersDataInput: UserUpdateWithoutOrdersDataInputInputObject
      OrderItemUpdateManyWithoutOwnerInput: OrderItemUpdateManyWithoutOwnerInputInputObject
      OrderItemUpdateWithWhereUniqueWithoutOwnerInput: OrderItemUpdateWithWhereUniqueWithoutOwnerInputInputObject
      OrderItemUpdateWithoutOwnerDataInput: OrderItemUpdateWithoutOwnerDataInputInputObject
      OrderItemUpsertWithWhereUniqueWithoutOwnerInput: OrderItemUpsertWithWhereUniqueWithoutOwnerInputInputObject
      UserUpsertWithoutOrdersInput: UserUpsertWithoutOrdersInputInputObject
      OrderUpsertWithoutItemsInput: OrderUpsertWithoutItemsInputInputObject
      OrderItemUpsertWithWhereUniqueWithoutPackageInput: OrderItemUpsertWithWhereUniqueWithoutPackageInputInputObject
      PackageUpsertWithWhereUniqueWithoutLeagueInput: PackageUpsertWithWhereUniqueWithoutLeagueInputInputObject
      PackageScalarWhereInput: PackageScalarWhereInputInputObject
      PackageUpdateManyWithWhereNestedInput: PackageUpdateManyWithWhereNestedInputInputObject
      PackageUpdateManyDataInput: PackageUpdateManyDataInputInputObject
      LeagueUpdateManyMutationInput: LeagueUpdateManyMutationInputInputObject
      TeamUpdateInput: TeamUpdateInputInputObject
      TeamUpdateManyMutationInput: TeamUpdateManyMutationInputInputObject
      PackageCreateInput: PackageCreateInputInputObject
      PackageUpdateInput: PackageUpdateInputInputObject
      PackageUpdateManyMutationInput: PackageUpdateManyMutationInputInputObject
      OrderCreateInput: OrderCreateInputInputObject
      OrderUpdateInput: OrderUpdateInputInputObject
      OrderUpdateManyMutationInput: OrderUpdateManyMutationInputInputObject
      OrderItemCreateInput: OrderItemCreateInputInputObject
      OrderItemUpdateInput: OrderItemUpdateInputInputObject
      OrderItemUpdateManyMutationInput: OrderItemUpdateManyMutationInputInputObject
      UserCreateInput: UserCreateInputInputObject
      UserUpdateInput: UserUpdateInputInputObject
      UserUpdateManyMutationInput: UserUpdateManyMutationInputInputObject
      NotificationSettingsCreateInput: NotificationSettingsCreateInputInputObject
      UserCreateOneWithoutNotificationSettingsInput: UserCreateOneWithoutNotificationSettingsInputInputObject
      UserCreateWithoutNotificationSettingsInput: UserCreateWithoutNotificationSettingsInputInputObject
      NotificationSettingsUpdateInput: NotificationSettingsUpdateInputInputObject
      UserUpdateOneWithoutNotificationSettingsInput: UserUpdateOneWithoutNotificationSettingsInputInputObject
      UserUpdateWithoutNotificationSettingsDataInput: UserUpdateWithoutNotificationSettingsDataInputInputObject
      UserUpsertWithoutNotificationSettingsInput: UserUpsertWithoutNotificationSettingsInputInputObject
      NotificationSettingsUpdateManyMutationInput: NotificationSettingsUpdateManyMutationInputInputObject
      PredictionCreateInput: PredictionCreateInputInputObject
      PackageCreateOneWithoutPredictionsInput: PackageCreateOneWithoutPredictionsInputInputObject
      PackageCreateWithoutPredictionsInput: PackageCreateWithoutPredictionsInputInputObject
      PredictionUpdateInput: PredictionUpdateInputInputObject
      PackageUpdateOneRequiredWithoutPredictionsInput: PackageUpdateOneRequiredWithoutPredictionsInputInputObject
      PackageUpdateWithoutPredictionsDataInput: PackageUpdateWithoutPredictionsDataInputInputObject
      PackageUpsertWithoutPredictionsInput: PackageUpsertWithoutPredictionsInputInputObject
      PredictionUpdateManyMutationInput: PredictionUpdateManyMutationInputInputObject
      LeagueSubscriptionWhereInput: LeagueSubscriptionWhereInputInputObject
      TeamSubscriptionWhereInput: TeamSubscriptionWhereInputInputObject
      PackageSubscriptionWhereInput: PackageSubscriptionWhereInputInputObject
      OrderSubscriptionWhereInput: OrderSubscriptionWhereInputInputObject
      OrderItemSubscriptionWhereInput: OrderItemSubscriptionWhereInputInputObject
      UserSubscriptionWhereInput: UserSubscriptionWhereInputInputObject
      NotificationSettingsSubscriptionWhereInput: NotificationSettingsSubscriptionWhereInputInputObject
      PredictionSubscriptionWhereInput: PredictionSubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    OrderStatus: OrderStatusValues,
    Role: RoleValues,
    PackageOrderByInput: PackageOrderByInputValues,
    OrderItemOrderByInput: OrderItemOrderByInputValues,
    OrderOrderByInput: OrderOrderByInputValues,
    PredictionOrderByInput: PredictionOrderByInputValues,
    TeamOrderByInput: TeamOrderByInputValues,
    LeagueOrderByInput: LeagueOrderByInputValues,
    UserOrderByInput: UserOrderByInputValues,
    NotificationSettingsOrderByInput: NotificationSettingsOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'league', args?: QueryLeagueArgs[] | false, alias?: string  } 
  | { name: 'leagues', args?: QueryLeaguesArgs[] | false, alias?: string  } 
  | { name: 'leaguesConnection', args?: QueryLeaguesConnectionArgs[] | false, alias?: string  } 
  | { name: 'team', args?: QueryTeamArgs[] | false, alias?: string  } 
  | { name: 'teams', args?: QueryTeamsArgs[] | false, alias?: string  } 
  | { name: 'teamsConnection', args?: QueryTeamsConnectionArgs[] | false, alias?: string  } 
  | { name: 'package', args?: QueryPackageArgs[] | false, alias?: string  } 
  | { name: 'packages', args?: QueryPackagesArgs[] | false, alias?: string  } 
  | { name: 'packagesConnection', args?: QueryPackagesConnectionArgs[] | false, alias?: string  } 
  | { name: 'order', args?: QueryOrderArgs[] | false, alias?: string  } 
  | { name: 'orders', args?: QueryOrdersArgs[] | false, alias?: string  } 
  | { name: 'ordersConnection', args?: QueryOrdersConnectionArgs[] | false, alias?: string  } 
  | { name: 'orderItem', args?: QueryOrderItemArgs[] | false, alias?: string  } 
  | { name: 'orderItems', args?: QueryOrderItemsArgs[] | false, alias?: string  } 
  | { name: 'orderItemsConnection', args?: QueryOrderItemsConnectionArgs[] | false, alias?: string  } 
  | { name: 'user', args?: QueryUserArgs[] | false, alias?: string  } 
  | { name: 'users', args?: QueryUsersArgs[] | false, alias?: string  } 
  | { name: 'usersConnection', args?: QueryUsersConnectionArgs[] | false, alias?: string  } 
  | { name: 'notificationSettings', args?: QueryNotificationSettingsArgs[] | false, alias?: string  } 
  | { name: 'notificationSettingses', args?: QueryNotificationSettingsesArgs[] | false, alias?: string  } 
  | { name: 'notificationSettingsesConnection', args?: QueryNotificationSettingsesConnectionArgs[] | false, alias?: string  } 
  | { name: 'prediction', args?: QueryPredictionArgs[] | false, alias?: string  } 
  | { name: 'predictions', args?: QueryPredictionsArgs[] | false, alias?: string  } 
  | { name: 'predictionsConnection', args?: QueryPredictionsConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'league'
  | 'leagues'
  | 'leaguesConnection'
  | 'team'
  | 'teams'
  | 'teamsConnection'
  | 'package'
  | 'packages'
  | 'packagesConnection'
  | 'order'
  | 'orders'
  | 'ordersConnection'
  | 'orderItem'
  | 'orderItems'
  | 'orderItemsConnection'
  | 'user'
  | 'users'
  | 'usersConnection'
  | 'notificationSettings'
  | 'notificationSettingses'
  | 'notificationSettingsesConnection'
  | 'prediction'
  | 'predictions'
  | 'predictionsConnection'


type QueryLeagueArgs =
  | 'where'
type QueryLeaguesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryLeaguesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamArgs =
  | 'where'
type QueryTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPackageArgs =
  | 'where'
type QueryPackagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPackagesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderArgs =
  | 'where'
type QueryOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrdersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderItemArgs =
  | 'where'
type QueryOrderItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryOrderItemsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserArgs =
  | 'where'
type QueryUsersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUsersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNotificationSettingsArgs =
  | 'where'
type QueryNotificationSettingsesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryNotificationSettingsesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPredictionArgs =
  | 'where'
type QueryPredictionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPredictionsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  league: {
    type: 'League'
    args: Record<QueryLeagueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: LeagueWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League | null> | prisma.League | null
  }
  leagues: {
    type: 'League'
    args: Record<QueryLeaguesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LeagueWhereInput | null, orderBy?: prisma.LeagueOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League[]> | prisma.League[]
  }
  leaguesConnection: {
    type: 'LeagueConnection'
    args: Record<QueryLeaguesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: LeagueWhereInput | null, orderBy?: prisma.LeagueOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LeagueConnection> | prisma.LeagueConnection
  }
  team: {
    type: 'Team'
    args: Record<QueryTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  teams: {
    type: 'Team'
    args: Record<QueryTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
  teamsConnection: {
    type: 'TeamConnection'
    args: Record<QueryTeamsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamConnection> | prisma.TeamConnection
  }
  package: {
    type: 'Package'
    args: Record<QueryPackageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PackageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package | null> | prisma.Package | null
  }
  packages: {
    type: 'Package'
    args: Record<QueryPackagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PackageWhereInput | null, orderBy?: prisma.PackageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package[]> | prisma.Package[]
  }
  packagesConnection: {
    type: 'PackageConnection'
    args: Record<QueryPackagesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PackageWhereInput | null, orderBy?: prisma.PackageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PackageConnection> | prisma.PackageConnection
  }
  order: {
    type: 'Order'
    args: Record<QueryOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  orders: {
    type: 'Order'
    args: Record<QueryOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order[]> | prisma.Order[]
  }
  ordersConnection: {
    type: 'OrderConnection'
    args: Record<QueryOrdersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderConnection> | prisma.OrderConnection
  }
  orderItem: {
    type: 'OrderItem'
    args: Record<QueryOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: OrderItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem | null> | prisma.OrderItem | null
  }
  orderItems: {
    type: 'OrderItem'
    args: Record<QueryOrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderItemWhereInput | null, orderBy?: prisma.OrderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem[]> | prisma.OrderItem[]
  }
  orderItemsConnection: {
    type: 'OrderItemConnection'
    args: Record<QueryOrderItemsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: OrderItemWhereInput | null, orderBy?: prisma.OrderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItemConnection> | prisma.OrderItemConnection
  }
  user: {
    type: 'User'
    args: Record<QueryUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  users: {
    type: 'User'
    args: Record<QueryUsersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User[]> | prisma.User[]
  }
  usersConnection: {
    type: 'UserConnection'
    args: Record<QueryUsersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserWhereInput | null, orderBy?: prisma.UserOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserConnection> | prisma.UserConnection
  }
  notificationSettings: {
    type: 'NotificationSettings'
    args: Record<QueryNotificationSettingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: NotificationSettingsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings | null> | prisma.NotificationSettings | null
  }
  notificationSettingses: {
    type: 'NotificationSettings'
    args: Record<QueryNotificationSettingsesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NotificationSettingsWhereInput | null, orderBy?: prisma.NotificationSettingsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings[]> | prisma.NotificationSettings[]
  }
  notificationSettingsesConnection: {
    type: 'NotificationSettingsConnection'
    args: Record<QueryNotificationSettingsesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: NotificationSettingsWhereInput | null, orderBy?: prisma.NotificationSettingsOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettingsConnection> | prisma.NotificationSettingsConnection
  }
  prediction: {
    type: 'Prediction'
    args: Record<QueryPredictionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PredictionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction | null> | prisma.Prediction | null
  }
  predictions: {
    type: 'Prediction'
    args: Record<QueryPredictionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PredictionWhereInput | null, orderBy?: prisma.PredictionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction[]> | prisma.Prediction[]
  }
  predictionsConnection: {
    type: 'PredictionConnection'
    args: Record<QueryPredictionsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PredictionWhereInput | null, orderBy?: prisma.PredictionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictionConnection> | prisma.PredictionConnection
  }
}
  

// Types for League

type LeagueObject =
  | LeagueFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'sport', args?: [] | false, alias?: string  } 
  | { name: 'seasonEndDate', args?: [] | false, alias?: string  } 
  | { name: 'packages', args?: LeaguePackagesArgs[] | false, alias?: string  } 
  | { name: 'teams', args?: LeagueTeamsArgs[] | false, alias?: string  } 

type LeagueFields =
  | 'id'
  | 'name'
  | 'sport'
  | 'seasonEndDate'
  | 'packages'
  | 'teams'


type LeaguePackagesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type LeagueTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface LeagueFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sport: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  seasonEndDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  packages: {
    type: 'Package'
    args: Record<LeaguePackagesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"League">,
      args: { where?: PackageWhereInput | null, orderBy?: prisma.PackageOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package[]> | prisma.Package[]
  }
  teams: {
    type: 'Team'
    args: Record<LeagueTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"League">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
}
  

// Types for Package

type PackageObject =
  | PackageFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 
  | { name: 'league', args?: [] | false, alias?: string  } 
  | { name: 'orderItems', args?: PackageOrderItemsArgs[] | false, alias?: string  } 
  | { name: 'predictions', args?: PackagePredictionsArgs[] | false, alias?: string  } 

type PackageFields =
  | 'id'
  | 'name'
  | 'description'
  | 'price'
  | 'image'
  | 'league'
  | 'orderItems'
  | 'predictions'


type PackageOrderItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PackagePredictionsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PackageFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  league: {
    type: 'League'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Package">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League> | prisma.League
  }
  orderItems: {
    type: 'OrderItem'
    args: Record<PackageOrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Package">,
      args: { where?: OrderItemWhereInput | null, orderBy?: prisma.OrderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem[]> | prisma.OrderItem[]
  }
  predictions: {
    type: 'Prediction'
    args: Record<PackagePredictionsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Package">,
      args: { where?: PredictionWhereInput | null, orderBy?: prisma.PredictionOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction[]> | prisma.Prediction[]
  }
}
  

// Types for OrderItem

type OrderItemObject =
  | OrderItemFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'expireAt', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'order', args?: [] | false, alias?: string  } 
  | { name: 'package', args?: [] | false, alias?: string  } 

type OrderItemFields =
  | 'id'
  | 'expireAt'
  | 'owner'
  | 'order'
  | 'package'



  

export interface OrderItemFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expireAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderItem">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  order: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderItem">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  package: {
    type: 'Package'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderItem">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package> | prisma.Package
  }
}
  

// Types for User

type UserObject =
  | UserFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'cart', args?: UserCartArgs[] | false, alias?: string  } 
  | { name: 'orders', args?: UserOrdersArgs[] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'resetToken', args?: [] | false, alias?: string  } 
  | { name: 'notificationSettings', args?: [] | false, alias?: string  } 

type UserFields =
  | 'id'
  | 'email'
  | 'phone'
  | 'password'
  | 'cart'
  | 'orders'
  | 'role'
  | 'resetToken'
  | 'notificationSettings'


type UserCartArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type UserOrdersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface UserFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  cart: {
    type: 'OrderItem'
    args: Record<UserCartArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: OrderItemWhereInput | null, orderBy?: prisma.OrderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem[]> | prisma.OrderItem[]
  }
  orders: {
    type: 'Order'
    args: Record<UserOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: { where?: OrderWhereInput | null, orderBy?: prisma.OrderOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order[]> | prisma.Order[]
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  resetToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  notificationSettings: {
    type: 'NotificationSettings'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"User">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings> | prisma.NotificationSettings
  }
}
  

// Types for Order

type OrderObject =
  | OrderFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'owner', args?: [] | false, alias?: string  } 
  | { name: 'items', args?: OrderItemsArgs[] | false, alias?: string  } 
  | { name: 'stripeId', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'totalPrice', args?: [] | false, alias?: string  } 
  | { name: 'totalRefunded', args?: [] | false, alias?: string  } 

type OrderFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'owner'
  | 'items'
  | 'stripeId'
  | 'status'
  | 'totalPrice'
  | 'totalRefunded'


type OrderItemsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface OrderFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  owner: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  items: {
    type: 'OrderItem'
    args: Record<OrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: { where?: OrderItemWhereInput | null, orderBy?: prisma.OrderItemOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem[]> | prisma.OrderItem[]
  }
  stripeId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'OrderStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Order">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderStatus> | prisma.OrderStatus
  }
  totalPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalRefunded: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NotificationSettings

type NotificationSettingsObject =
  | NotificationSettingsFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 

type NotificationSettingsFields =
  | 'id'
  | 'email'
  | 'phone'
  | 'user'



  

export interface NotificationSettingsFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  phone: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NotificationSettings">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
}
  

// Types for Prediction

type PredictionObject =
  | PredictionFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'package', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'home', args?: [] | false, alias?: string  } 
  | { name: 'away', args?: [] | false, alias?: string  } 
  | { name: 'winner', args?: [] | false, alias?: string  } 

type PredictionFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'startDate'
  | 'package'
  | 'name'
  | 'home'
  | 'away'
  | 'winner'



  

export interface PredictionFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  package: {
    type: 'Package'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Prediction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package> | prisma.Package
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  home: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Prediction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  away: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Prediction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  winner: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Prediction">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
}
  

// Types for Team

type TeamObject =
  | TeamFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'key', args?: [] | false, alias?: string  } 
  | { name: 'league', args?: [] | false, alias?: string  } 

type TeamFields =
  | 'id'
  | 'name'
  | 'key'
  | 'league'



  

export interface TeamFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  league: {
    type: 'League'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Team">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League> | prisma.League
  }
}
  

// Types for LeagueConnection

type LeagueConnectionObject =
  | LeagueConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type LeagueConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface LeagueConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LeagueConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'LeagueEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"LeagueConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LeagueEdge[]> | prisma.LeagueEdge[]
  }
  aggregate: {
    type: 'AggregateLeague'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LeagueConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateLeague> | prisma.AggregateLeague
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for LeagueEdge

type LeagueEdgeObject =
  | LeagueEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type LeagueEdgeFields =
  | 'node'
  | 'cursor'



  

export interface LeagueEdgeFieldDetails {
  node: {
    type: 'League'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LeagueEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League> | prisma.League
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateLeague

type AggregateLeagueObject =
  | AggregateLeagueFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateLeagueFields =
  | 'count'



  

export interface AggregateLeagueFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamConnection

type TeamConnectionObject =
  | TeamConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TeamConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TeamConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TeamEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamEdge[]> | prisma.TeamEdge[]
  }
  aggregate: {
    type: 'AggregateTeam'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTeam> | prisma.AggregateTeam
  }
}
  

// Types for TeamEdge

type TeamEdgeObject =
  | TeamEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TeamEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TeamEdgeFieldDetails {
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTeam

type AggregateTeamObject =
  | AggregateTeamFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTeamFields =
  | 'count'



  

export interface AggregateTeamFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PackageConnection

type PackageConnectionObject =
  | PackageConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PackageConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PackageConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PackageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PackageEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PackageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PackageEdge[]> | prisma.PackageEdge[]
  }
  aggregate: {
    type: 'AggregatePackage'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PackageConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePackage> | prisma.AggregatePackage
  }
}
  

// Types for PackageEdge

type PackageEdgeObject =
  | PackageEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PackageEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PackageEdgeFieldDetails {
  node: {
    type: 'Package'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PackageEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package> | prisma.Package
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePackage

type AggregatePackageObject =
  | AggregatePackageFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePackageFields =
  | 'count'



  

export interface AggregatePackageFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderConnection

type OrderConnectionObject =
  | OrderConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OrderConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OrderConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrderEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderEdge[]> | prisma.OrderEdge[]
  }
  aggregate: {
    type: 'AggregateOrder'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOrder> | prisma.AggregateOrder
  }
}
  

// Types for OrderEdge

type OrderEdgeObject =
  | OrderEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OrderEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OrderEdgeFieldDetails {
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOrder

type AggregateOrderObject =
  | AggregateOrderFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOrderFields =
  | 'count'



  

export interface AggregateOrderFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderItemConnection

type OrderItemConnectionObject =
  | OrderItemConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type OrderItemConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface OrderItemConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'OrderItemEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"OrderItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItemEdge[]> | prisma.OrderItemEdge[]
  }
  aggregate: {
    type: 'AggregateOrderItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderItemConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateOrderItem> | prisma.AggregateOrderItem
  }
}
  

// Types for OrderItemEdge

type OrderItemEdgeObject =
  | OrderItemEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type OrderItemEdgeFields =
  | 'node'
  | 'cursor'



  

export interface OrderItemEdgeFieldDetails {
  node: {
    type: 'OrderItem'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderItemEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem> | prisma.OrderItem
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateOrderItem

type AggregateOrderItemObject =
  | AggregateOrderItemFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateOrderItemFields =
  | 'count'



  

export interface AggregateOrderItemFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserConnection

type UserConnectionObject =
  | UserConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserEdge[]> | prisma.UserEdge[]
  }
  aggregate: {
    type: 'AggregateUser'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUser> | prisma.AggregateUser
  }
}
  

// Types for UserEdge

type UserEdgeObject =
  | UserEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserEdgeFieldDetails {
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUser

type AggregateUserObject =
  | AggregateUserFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserFields =
  | 'count'



  

export interface AggregateUserFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for NotificationSettingsConnection

type NotificationSettingsConnectionObject =
  | NotificationSettingsConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type NotificationSettingsConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface NotificationSettingsConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationSettingsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'NotificationSettingsEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationSettingsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettingsEdge[]> | prisma.NotificationSettingsEdge[]
  }
  aggregate: {
    type: 'AggregateNotificationSettings'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationSettingsConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateNotificationSettings> | prisma.AggregateNotificationSettings
  }
}
  

// Types for NotificationSettingsEdge

type NotificationSettingsEdgeObject =
  | NotificationSettingsEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type NotificationSettingsEdgeFields =
  | 'node'
  | 'cursor'



  

export interface NotificationSettingsEdgeFieldDetails {
  node: {
    type: 'NotificationSettings'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationSettingsEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings> | prisma.NotificationSettings
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateNotificationSettings

type AggregateNotificationSettingsObject =
  | AggregateNotificationSettingsFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateNotificationSettingsFields =
  | 'count'



  

export interface AggregateNotificationSettingsFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictionConnection

type PredictionConnectionObject =
  | PredictionConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PredictionConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PredictionConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PredictionEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PredictionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictionEdge[]> | prisma.PredictionEdge[]
  }
  aggregate: {
    type: 'AggregatePrediction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictionConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePrediction> | prisma.AggregatePrediction
  }
}
  

// Types for PredictionEdge

type PredictionEdgeObject =
  | PredictionEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PredictionEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PredictionEdgeFieldDetails {
  node: {
    type: 'Prediction'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictionEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction> | prisma.Prediction
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePrediction

type AggregatePredictionObject =
  | AggregatePredictionFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePredictionFields =
  | 'count'



  

export interface AggregatePredictionFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createLeague', args?: MutationCreateLeagueArgs[] | false, alias?: string  } 
  | { name: 'updateLeague', args?: MutationUpdateLeagueArgs[] | false, alias?: string  } 
  | { name: 'updateManyLeagues', args?: MutationUpdateManyLeaguesArgs[] | false, alias?: string  } 
  | { name: 'upsertLeague', args?: MutationUpsertLeagueArgs[] | false, alias?: string  } 
  | { name: 'deleteLeague', args?: MutationDeleteLeagueArgs[] | false, alias?: string  } 
  | { name: 'deleteManyLeagues', args?: MutationDeleteManyLeaguesArgs[] | false, alias?: string  } 
  | { name: 'createTeam', args?: MutationCreateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateTeam', args?: MutationUpdateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateManyTeams', args?: MutationUpdateManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'upsertTeam', args?: MutationUpsertTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteTeam', args?: MutationDeleteTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTeams', args?: MutationDeleteManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'createPackage', args?: MutationCreatePackageArgs[] | false, alias?: string  } 
  | { name: 'updatePackage', args?: MutationUpdatePackageArgs[] | false, alias?: string  } 
  | { name: 'updateManyPackages', args?: MutationUpdateManyPackagesArgs[] | false, alias?: string  } 
  | { name: 'upsertPackage', args?: MutationUpsertPackageArgs[] | false, alias?: string  } 
  | { name: 'deletePackage', args?: MutationDeletePackageArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPackages', args?: MutationDeleteManyPackagesArgs[] | false, alias?: string  } 
  | { name: 'createOrder', args?: MutationCreateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateOrder', args?: MutationUpdateOrderArgs[] | false, alias?: string  } 
  | { name: 'updateManyOrders', args?: MutationUpdateManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'upsertOrder', args?: MutationUpsertOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteOrder', args?: MutationDeleteOrderArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOrders', args?: MutationDeleteManyOrdersArgs[] | false, alias?: string  } 
  | { name: 'createOrderItem', args?: MutationCreateOrderItemArgs[] | false, alias?: string  } 
  | { name: 'updateOrderItem', args?: MutationUpdateOrderItemArgs[] | false, alias?: string  } 
  | { name: 'updateManyOrderItems', args?: MutationUpdateManyOrderItemsArgs[] | false, alias?: string  } 
  | { name: 'upsertOrderItem', args?: MutationUpsertOrderItemArgs[] | false, alias?: string  } 
  | { name: 'deleteOrderItem', args?: MutationDeleteOrderItemArgs[] | false, alias?: string  } 
  | { name: 'deleteManyOrderItems', args?: MutationDeleteManyOrderItemsArgs[] | false, alias?: string  } 
  | { name: 'createUser', args?: MutationCreateUserArgs[] | false, alias?: string  } 
  | { name: 'updateUser', args?: MutationUpdateUserArgs[] | false, alias?: string  } 
  | { name: 'updateManyUsers', args?: MutationUpdateManyUsersArgs[] | false, alias?: string  } 
  | { name: 'upsertUser', args?: MutationUpsertUserArgs[] | false, alias?: string  } 
  | { name: 'deleteUser', args?: MutationDeleteUserArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUsers', args?: MutationDeleteManyUsersArgs[] | false, alias?: string  } 
  | { name: 'createNotificationSettings', args?: MutationCreateNotificationSettingsArgs[] | false, alias?: string  } 
  | { name: 'updateNotificationSettings', args?: MutationUpdateNotificationSettingsArgs[] | false, alias?: string  } 
  | { name: 'updateManyNotificationSettingses', args?: MutationUpdateManyNotificationSettingsesArgs[] | false, alias?: string  } 
  | { name: 'upsertNotificationSettings', args?: MutationUpsertNotificationSettingsArgs[] | false, alias?: string  } 
  | { name: 'deleteNotificationSettings', args?: MutationDeleteNotificationSettingsArgs[] | false, alias?: string  } 
  | { name: 'deleteManyNotificationSettingses', args?: MutationDeleteManyNotificationSettingsesArgs[] | false, alias?: string  } 
  | { name: 'createPrediction', args?: MutationCreatePredictionArgs[] | false, alias?: string  } 
  | { name: 'updatePrediction', args?: MutationUpdatePredictionArgs[] | false, alias?: string  } 
  | { name: 'updateManyPredictions', args?: MutationUpdateManyPredictionsArgs[] | false, alias?: string  } 
  | { name: 'upsertPrediction', args?: MutationUpsertPredictionArgs[] | false, alias?: string  } 
  | { name: 'deletePrediction', args?: MutationDeletePredictionArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPredictions', args?: MutationDeleteManyPredictionsArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createLeague'
  | 'updateLeague'
  | 'updateManyLeagues'
  | 'upsertLeague'
  | 'deleteLeague'
  | 'deleteManyLeagues'
  | 'createTeam'
  | 'updateTeam'
  | 'updateManyTeams'
  | 'upsertTeam'
  | 'deleteTeam'
  | 'deleteManyTeams'
  | 'createPackage'
  | 'updatePackage'
  | 'updateManyPackages'
  | 'upsertPackage'
  | 'deletePackage'
  | 'deleteManyPackages'
  | 'createOrder'
  | 'updateOrder'
  | 'updateManyOrders'
  | 'upsertOrder'
  | 'deleteOrder'
  | 'deleteManyOrders'
  | 'createOrderItem'
  | 'updateOrderItem'
  | 'updateManyOrderItems'
  | 'upsertOrderItem'
  | 'deleteOrderItem'
  | 'deleteManyOrderItems'
  | 'createUser'
  | 'updateUser'
  | 'updateManyUsers'
  | 'upsertUser'
  | 'deleteUser'
  | 'deleteManyUsers'
  | 'createNotificationSettings'
  | 'updateNotificationSettings'
  | 'updateManyNotificationSettingses'
  | 'upsertNotificationSettings'
  | 'deleteNotificationSettings'
  | 'deleteManyNotificationSettingses'
  | 'createPrediction'
  | 'updatePrediction'
  | 'updateManyPredictions'
  | 'upsertPrediction'
  | 'deletePrediction'
  | 'deleteManyPredictions'


type MutationCreateLeagueArgs =
  | 'data'
type MutationUpdateLeagueArgs =
  | 'data'
  | 'where'
type MutationUpdateManyLeaguesArgs =
  | 'data'
  | 'where'
type MutationUpsertLeagueArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteLeagueArgs =
  | 'where'
type MutationDeleteManyLeaguesArgs =
  | 'where'
type MutationCreateTeamArgs =
  | 'data'
type MutationUpdateTeamArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTeamsArgs =
  | 'data'
  | 'where'
type MutationUpsertTeamArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTeamArgs =
  | 'where'
type MutationDeleteManyTeamsArgs =
  | 'where'
type MutationCreatePackageArgs =
  | 'data'
type MutationUpdatePackageArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPackagesArgs =
  | 'data'
  | 'where'
type MutationUpsertPackageArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePackageArgs =
  | 'where'
type MutationDeleteManyPackagesArgs =
  | 'where'
type MutationCreateOrderArgs =
  | 'data'
type MutationUpdateOrderArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOrdersArgs =
  | 'data'
  | 'where'
type MutationUpsertOrderArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOrderArgs =
  | 'where'
type MutationDeleteManyOrdersArgs =
  | 'where'
type MutationCreateOrderItemArgs =
  | 'data'
type MutationUpdateOrderItemArgs =
  | 'data'
  | 'where'
type MutationUpdateManyOrderItemsArgs =
  | 'data'
  | 'where'
type MutationUpsertOrderItemArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteOrderItemArgs =
  | 'where'
type MutationDeleteManyOrderItemsArgs =
  | 'where'
type MutationCreateUserArgs =
  | 'data'
type MutationUpdateUserArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUsersArgs =
  | 'data'
  | 'where'
type MutationUpsertUserArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserArgs =
  | 'where'
type MutationDeleteManyUsersArgs =
  | 'where'
type MutationCreateNotificationSettingsArgs =
  | 'data'
type MutationUpdateNotificationSettingsArgs =
  | 'data'
  | 'where'
type MutationUpdateManyNotificationSettingsesArgs =
  | 'data'
  | 'where'
type MutationUpsertNotificationSettingsArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteNotificationSettingsArgs =
  | 'where'
type MutationDeleteManyNotificationSettingsesArgs =
  | 'where'
type MutationCreatePredictionArgs =
  | 'data'
type MutationUpdatePredictionArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPredictionsArgs =
  | 'data'
  | 'where'
type MutationUpsertPredictionArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePredictionArgs =
  | 'where'
type MutationDeleteManyPredictionsArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createLeague: {
    type: 'League'
    args: Record<MutationCreateLeagueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LeagueCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League> | prisma.League
  }
  updateLeague: {
    type: 'League'
    args: Record<MutationUpdateLeagueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LeagueUpdateInput, where: LeagueWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League | null> | prisma.League | null
  }
  updateManyLeagues: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyLeaguesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: LeagueUpdateManyMutationInput, where?: LeagueWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertLeague: {
    type: 'League'
    args: Record<MutationUpsertLeagueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LeagueWhereUniqueInput, create: LeagueCreateInput, update: LeagueUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League> | prisma.League
  }
  deleteLeague: {
    type: 'League'
    args: Record<MutationDeleteLeagueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: LeagueWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League | null> | prisma.League | null
  }
  deleteManyLeagues: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyLeaguesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: LeagueWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTeam: {
    type: 'Team'
    args: Record<MutationCreateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  updateTeam: {
    type: 'Team'
    args: Record<MutationUpdateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateInput, where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updateManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateManyMutationInput, where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTeam: {
    type: 'Team'
    args: Record<MutationUpsertTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput, create: TeamCreateInput, update: TeamUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  deleteTeam: {
    type: 'Team'
    args: Record<MutationDeleteTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  deleteManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPackage: {
    type: 'Package'
    args: Record<MutationCreatePackageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PackageCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package> | prisma.Package
  }
  updatePackage: {
    type: 'Package'
    args: Record<MutationUpdatePackageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PackageUpdateInput, where: PackageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package | null> | prisma.Package | null
  }
  updateManyPackages: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPackagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PackageUpdateManyMutationInput, where?: PackageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPackage: {
    type: 'Package'
    args: Record<MutationUpsertPackageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PackageWhereUniqueInput, create: PackageCreateInput, update: PackageUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package> | prisma.Package
  }
  deletePackage: {
    type: 'Package'
    args: Record<MutationDeletePackageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PackageWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package | null> | prisma.Package | null
  }
  deleteManyPackages: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPackagesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PackageWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrder: {
    type: 'Order'
    args: Record<MutationCreateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  updateOrder: {
    type: 'Order'
    args: Record<MutationUpdateOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateInput, where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updateManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderUpdateManyMutationInput, where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrder: {
    type: 'Order'
    args: Record<MutationUpsertOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput, create: OrderCreateInput, update: OrderUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order> | prisma.Order
  }
  deleteOrder: {
    type: 'Order'
    args: Record<MutationDeleteOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  deleteManyOrders: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrdersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OrderWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createOrderItem: {
    type: 'OrderItem'
    args: Record<MutationCreateOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderItemCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem> | prisma.OrderItem
  }
  updateOrderItem: {
    type: 'OrderItem'
    args: Record<MutationUpdateOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderItemUpdateInput, where: OrderItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem | null> | prisma.OrderItem | null
  }
  updateManyOrderItems: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyOrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: OrderItemUpdateManyMutationInput, where?: OrderItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertOrderItem: {
    type: 'OrderItem'
    args: Record<MutationUpsertOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderItemWhereUniqueInput, create: OrderItemCreateInput, update: OrderItemUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem> | prisma.OrderItem
  }
  deleteOrderItem: {
    type: 'OrderItem'
    args: Record<MutationDeleteOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: OrderItemWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem | null> | prisma.OrderItem | null
  }
  deleteManyOrderItems: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyOrderItemsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: OrderItemWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUser: {
    type: 'User'
    args: Record<MutationCreateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  updateUser: {
    type: 'User'
    args: Record<MutationUpdateUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateInput, where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updateManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserUpdateManyMutationInput, where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUser: {
    type: 'User'
    args: Record<MutationUpsertUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User> | prisma.User
  }
  deleteUser: {
    type: 'User'
    args: Record<MutationDeleteUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  deleteManyUsers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUsersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createNotificationSettings: {
    type: 'NotificationSettings'
    args: Record<MutationCreateNotificationSettingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationSettingsCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings> | prisma.NotificationSettings
  }
  updateNotificationSettings: {
    type: 'NotificationSettings'
    args: Record<MutationUpdateNotificationSettingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationSettingsUpdateInput, where: NotificationSettingsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings | null> | prisma.NotificationSettings | null
  }
  updateManyNotificationSettingses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyNotificationSettingsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: NotificationSettingsUpdateManyMutationInput, where?: NotificationSettingsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertNotificationSettings: {
    type: 'NotificationSettings'
    args: Record<MutationUpsertNotificationSettingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NotificationSettingsWhereUniqueInput, create: NotificationSettingsCreateInput, update: NotificationSettingsUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings> | prisma.NotificationSettings
  }
  deleteNotificationSettings: {
    type: 'NotificationSettings'
    args: Record<MutationDeleteNotificationSettingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: NotificationSettingsWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings | null> | prisma.NotificationSettings | null
  }
  deleteManyNotificationSettingses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyNotificationSettingsesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: NotificationSettingsWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPrediction: {
    type: 'Prediction'
    args: Record<MutationCreatePredictionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictionCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction> | prisma.Prediction
  }
  updatePrediction: {
    type: 'Prediction'
    args: Record<MutationUpdatePredictionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictionUpdateInput, where: PredictionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction | null> | prisma.Prediction | null
  }
  updateManyPredictions: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPredictionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PredictionUpdateManyMutationInput, where?: PredictionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPrediction: {
    type: 'Prediction'
    args: Record<MutationUpsertPredictionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PredictionWhereUniqueInput, create: PredictionCreateInput, update: PredictionUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction> | prisma.Prediction
  }
  deletePrediction: {
    type: 'Prediction'
    args: Record<MutationDeletePredictionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PredictionWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction | null> | prisma.Prediction | null
  }
  deleteManyPredictions: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPredictionsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PredictionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'league', args?: SubscriptionLeagueArgs[] | false, alias?: string  } 
  | { name: 'team', args?: SubscriptionTeamArgs[] | false, alias?: string  } 
  | { name: 'package', args?: SubscriptionPackageArgs[] | false, alias?: string  } 
  | { name: 'order', args?: SubscriptionOrderArgs[] | false, alias?: string  } 
  | { name: 'orderItem', args?: SubscriptionOrderItemArgs[] | false, alias?: string  } 
  | { name: 'user', args?: SubscriptionUserArgs[] | false, alias?: string  } 
  | { name: 'notificationSettings', args?: SubscriptionNotificationSettingsArgs[] | false, alias?: string  } 
  | { name: 'prediction', args?: SubscriptionPredictionArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'league'
  | 'team'
  | 'package'
  | 'order'
  | 'orderItem'
  | 'user'
  | 'notificationSettings'
  | 'prediction'


type SubscriptionLeagueArgs =
  | 'where'
type SubscriptionTeamArgs =
  | 'where'
type SubscriptionPackageArgs =
  | 'where'
type SubscriptionOrderArgs =
  | 'where'
type SubscriptionOrderItemArgs =
  | 'where'
type SubscriptionUserArgs =
  | 'where'
type SubscriptionNotificationSettingsArgs =
  | 'where'
type SubscriptionPredictionArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  league: {
    type: 'LeagueSubscriptionPayload'
    args: Record<SubscriptionLeagueArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: LeagueSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LeagueSubscriptionPayload | null> | prisma.LeagueSubscriptionPayload | null
  }
  team: {
    type: 'TeamSubscriptionPayload'
    args: Record<SubscriptionTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TeamSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamSubscriptionPayload | null> | prisma.TeamSubscriptionPayload | null
  }
  package: {
    type: 'PackageSubscriptionPayload'
    args: Record<SubscriptionPackageArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PackageSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PackageSubscriptionPayload | null> | prisma.PackageSubscriptionPayload | null
  }
  order: {
    type: 'OrderSubscriptionPayload'
    args: Record<SubscriptionOrderArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OrderSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderSubscriptionPayload | null> | prisma.OrderSubscriptionPayload | null
  }
  orderItem: {
    type: 'OrderItemSubscriptionPayload'
    args: Record<SubscriptionOrderItemArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: OrderItemSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItemSubscriptionPayload | null> | prisma.OrderItemSubscriptionPayload | null
  }
  user: {
    type: 'UserSubscriptionPayload'
    args: Record<SubscriptionUserArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserSubscriptionPayload | null> | prisma.UserSubscriptionPayload | null
  }
  notificationSettings: {
    type: 'NotificationSettingsSubscriptionPayload'
    args: Record<SubscriptionNotificationSettingsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: NotificationSettingsSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettingsSubscriptionPayload | null> | prisma.NotificationSettingsSubscriptionPayload | null
  }
  prediction: {
    type: 'PredictionSubscriptionPayload'
    args: Record<SubscriptionPredictionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PredictionSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictionSubscriptionPayload | null> | prisma.PredictionSubscriptionPayload | null
  }
}
  

// Types for LeagueSubscriptionPayload

type LeagueSubscriptionPayloadObject =
  | LeagueSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type LeagueSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface LeagueSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"LeagueSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'League'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LeagueSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.League | null> | prisma.League | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'LeaguePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"LeagueSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.LeaguePreviousValues | null> | prisma.LeaguePreviousValues | null
  }
}
  

// Types for LeaguePreviousValues

type LeaguePreviousValuesObject =
  | LeaguePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'sport', args?: [] | false, alias?: string  } 
  | { name: 'seasonEndDate', args?: [] | false, alias?: string  } 

type LeaguePreviousValuesFields =
  | 'id'
  | 'name'
  | 'sport'
  | 'seasonEndDate'



  

export interface LeaguePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sport: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  seasonEndDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamSubscriptionPayload

type TeamSubscriptionPayloadObject =
  | TeamSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TeamSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TeamSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TeamPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPreviousValues | null> | prisma.TeamPreviousValues | null
  }
}
  

// Types for TeamPreviousValues

type TeamPreviousValuesObject =
  | TeamPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'key', args?: [] | false, alias?: string  } 

type TeamPreviousValuesFields =
  | 'id'
  | 'name'
  | 'key'



  

export interface TeamPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  key: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PackageSubscriptionPayload

type PackageSubscriptionPayloadObject =
  | PackageSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PackageSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PackageSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PackageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Package'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PackageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Package | null> | prisma.Package | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PackagePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PackageSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PackagePreviousValues | null> | prisma.PackagePreviousValues | null
  }
}
  

// Types for PackagePreviousValues

type PackagePreviousValuesObject =
  | PackagePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'description', args?: [] | false, alias?: string  } 
  | { name: 'price', args?: [] | false, alias?: string  } 
  | { name: 'image', args?: [] | false, alias?: string  } 

type PackagePreviousValuesFields =
  | 'id'
  | 'name'
  | 'description'
  | 'price'
  | 'image'



  

export interface PackagePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  description: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  price: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  image: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for OrderSubscriptionPayload

type OrderSubscriptionPayloadObject =
  | OrderSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OrderSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OrderSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Order'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Order | null> | prisma.Order | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrderPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderPreviousValues | null> | prisma.OrderPreviousValues | null
  }
}
  

// Types for OrderPreviousValues

type OrderPreviousValuesObject =
  | OrderPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'stripeId', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'totalPrice', args?: [] | false, alias?: string  } 
  | { name: 'totalRefunded', args?: [] | false, alias?: string  } 

type OrderPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'stripeId'
  | 'status'
  | 'totalPrice'
  | 'totalRefunded'



  

export interface OrderPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  stripeId: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  status: {
    type: 'OrderStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderStatus> | prisma.OrderStatus
  }
  totalPrice: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  totalRefunded: {
    type: 'Float'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for OrderItemSubscriptionPayload

type OrderItemSubscriptionPayloadObject =
  | OrderItemSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type OrderItemSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface OrderItemSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"OrderItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'OrderItem'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItem | null> | prisma.OrderItem | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'OrderItemPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"OrderItemSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.OrderItemPreviousValues | null> | prisma.OrderItemPreviousValues | null
  }
}
  

// Types for OrderItemPreviousValues

type OrderItemPreviousValuesObject =
  | OrderItemPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'expireAt', args?: [] | false, alias?: string  } 

type OrderItemPreviousValuesFields =
  | 'id'
  | 'expireAt'



  

export interface OrderItemPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  expireAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserSubscriptionPayload

type UserSubscriptionPayloadObject =
  | UserSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'User'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.User | null> | prisma.User | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserPreviousValues | null> | prisma.UserPreviousValues | null
  }
}
  

// Types for UserPreviousValues

type UserPreviousValuesObject =
  | UserPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'role', args?: [] | false, alias?: string  } 
  | { name: 'resetToken', args?: [] | false, alias?: string  } 

type UserPreviousValuesFields =
  | 'id'
  | 'email'
  | 'phone'
  | 'password'
  | 'role'
  | 'resetToken'



  

export interface UserPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  phone: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  role: {
    type: 'Role'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Role | null> | prisma.Role | null
  }
  resetToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for NotificationSettingsSubscriptionPayload

type NotificationSettingsSubscriptionPayloadObject =
  | NotificationSettingsSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type NotificationSettingsSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface NotificationSettingsSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"NotificationSettingsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'NotificationSettings'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NotificationSettingsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettings | null> | prisma.NotificationSettings | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'NotificationSettingsPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"NotificationSettingsSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.NotificationSettingsPreviousValues | null> | prisma.NotificationSettingsPreviousValues | null
  }
}
  

// Types for NotificationSettingsPreviousValues

type NotificationSettingsPreviousValuesObject =
  | NotificationSettingsPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'phone', args?: [] | false, alias?: string  } 

type NotificationSettingsPreviousValuesFields =
  | 'id'
  | 'email'
  | 'phone'



  

export interface NotificationSettingsPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  phone: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PredictionSubscriptionPayload

type PredictionSubscriptionPayloadObject =
  | PredictionSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PredictionSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PredictionSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PredictionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Prediction'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PredictionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Prediction | null> | prisma.Prediction | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PredictionPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PredictionSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PredictionPreviousValues | null> | prisma.PredictionPreviousValues | null
  }
}
  

// Types for PredictionPreviousValues

type PredictionPreviousValuesObject =
  | PredictionPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type PredictionPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'startDate'
  | 'name'



  

export interface PredictionPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface LeagueWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type LeagueWhereUniqueInputInputObject =
  | Extract<keyof LeagueWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PackageWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  league?: LeagueWhereInput | null
  orderItems_every?: OrderItemWhereInput | null
  orderItems_some?: OrderItemWhereInput | null
  orderItems_none?: OrderItemWhereInput | null
  predictions_every?: PredictionWhereInput | null
  predictions_some?: PredictionWhereInput | null
  predictions_none?: PredictionWhereInput | null
  AND?: PackageWhereInput[]
  OR?: PackageWhereInput[]
  NOT?: PackageWhereInput[]
}
export type PackageWhereInputInputObject =
  | Extract<keyof PackageWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'orderItems_every', alias?: string  } 
  | { name: 'orderItems_some', alias?: string  } 
  | { name: 'orderItems_none', alias?: string  } 
  | { name: 'predictions_every', alias?: string  } 
  | { name: 'predictions_some', alias?: string  } 
  | { name: 'predictions_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface LeagueWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  sport?: string | null
  sport_not?: string | null
  sport_in?: string[]
  sport_not_in?: string[]
  sport_lt?: string | null
  sport_lte?: string | null
  sport_gt?: string | null
  sport_gte?: string | null
  sport_contains?: string | null
  sport_not_contains?: string | null
  sport_starts_with?: string | null
  sport_not_starts_with?: string | null
  sport_ends_with?: string | null
  sport_not_ends_with?: string | null
  seasonEndDate?: string | null
  seasonEndDate_not?: string | null
  seasonEndDate_in?: string[]
  seasonEndDate_not_in?: string[]
  seasonEndDate_lt?: string | null
  seasonEndDate_lte?: string | null
  seasonEndDate_gt?: string | null
  seasonEndDate_gte?: string | null
  packages_every?: PackageWhereInput | null
  packages_some?: PackageWhereInput | null
  packages_none?: PackageWhereInput | null
  teams_every?: TeamWhereInput | null
  teams_some?: TeamWhereInput | null
  teams_none?: TeamWhereInput | null
  AND?: LeagueWhereInput[]
  OR?: LeagueWhereInput[]
  NOT?: LeagueWhereInput[]
}
export type LeagueWhereInputInputObject =
  | Extract<keyof LeagueWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'sport_not', alias?: string  } 
  | { name: 'sport_in', alias?: string  } 
  | { name: 'sport_not_in', alias?: string  } 
  | { name: 'sport_lt', alias?: string  } 
  | { name: 'sport_lte', alias?: string  } 
  | { name: 'sport_gt', alias?: string  } 
  | { name: 'sport_gte', alias?: string  } 
  | { name: 'sport_contains', alias?: string  } 
  | { name: 'sport_not_contains', alias?: string  } 
  | { name: 'sport_starts_with', alias?: string  } 
  | { name: 'sport_not_starts_with', alias?: string  } 
  | { name: 'sport_ends_with', alias?: string  } 
  | { name: 'sport_not_ends_with', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  | { name: 'seasonEndDate_not', alias?: string  } 
  | { name: 'seasonEndDate_in', alias?: string  } 
  | { name: 'seasonEndDate_not_in', alias?: string  } 
  | { name: 'seasonEndDate_lt', alias?: string  } 
  | { name: 'seasonEndDate_lte', alias?: string  } 
  | { name: 'seasonEndDate_gt', alias?: string  } 
  | { name: 'seasonEndDate_gte', alias?: string  } 
  | { name: 'packages_every', alias?: string  } 
  | { name: 'packages_some', alias?: string  } 
  | { name: 'packages_none', alias?: string  } 
  | { name: 'teams_every', alias?: string  } 
  | { name: 'teams_some', alias?: string  } 
  | { name: 'teams_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  key?: string | null
  key_not?: string | null
  key_in?: string[]
  key_not_in?: string[]
  key_lt?: string | null
  key_lte?: string | null
  key_gt?: string | null
  key_gte?: string | null
  key_contains?: string | null
  key_not_contains?: string | null
  key_starts_with?: string | null
  key_not_starts_with?: string | null
  key_ends_with?: string | null
  key_not_ends_with?: string | null
  league?: LeagueWhereInput | null
  AND?: TeamWhereInput[]
  OR?: TeamWhereInput[]
  NOT?: TeamWhereInput[]
}
export type TeamWhereInputInputObject =
  | Extract<keyof TeamWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'key_not', alias?: string  } 
  | { name: 'key_in', alias?: string  } 
  | { name: 'key_not_in', alias?: string  } 
  | { name: 'key_lt', alias?: string  } 
  | { name: 'key_lte', alias?: string  } 
  | { name: 'key_gt', alias?: string  } 
  | { name: 'key_gte', alias?: string  } 
  | { name: 'key_contains', alias?: string  } 
  | { name: 'key_not_contains', alias?: string  } 
  | { name: 'key_starts_with', alias?: string  } 
  | { name: 'key_not_starts_with', alias?: string  } 
  | { name: 'key_ends_with', alias?: string  } 
  | { name: 'key_not_ends_with', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderItemWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  expireAt?: string | null
  expireAt_not?: string | null
  expireAt_in?: string[]
  expireAt_not_in?: string[]
  expireAt_lt?: string | null
  expireAt_lte?: string | null
  expireAt_gt?: string | null
  expireAt_gte?: string | null
  owner?: UserWhereInput | null
  order?: OrderWhereInput | null
  package?: PackageWhereInput | null
  AND?: OrderItemWhereInput[]
  OR?: OrderItemWhereInput[]
  NOT?: OrderItemWhereInput[]
}
export type OrderItemWhereInputInputObject =
  | Extract<keyof OrderItemWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'expireAt', alias?: string  } 
  | { name: 'expireAt_not', alias?: string  } 
  | { name: 'expireAt_in', alias?: string  } 
  | { name: 'expireAt_not_in', alias?: string  } 
  | { name: 'expireAt_lt', alias?: string  } 
  | { name: 'expireAt_lte', alias?: string  } 
  | { name: 'expireAt_gt', alias?: string  } 
  | { name: 'expireAt_gte', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'package', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  phone?: string | null
  phone_not?: string | null
  phone_in?: string[]
  phone_not_in?: string[]
  phone_lt?: string | null
  phone_lte?: string | null
  phone_gt?: string | null
  phone_gte?: string | null
  phone_contains?: string | null
  phone_not_contains?: string | null
  phone_starts_with?: string | null
  phone_not_starts_with?: string | null
  phone_ends_with?: string | null
  phone_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  cart_every?: OrderItemWhereInput | null
  cart_some?: OrderItemWhereInput | null
  cart_none?: OrderItemWhereInput | null
  orders_every?: OrderWhereInput | null
  orders_some?: OrderWhereInput | null
  orders_none?: OrderWhereInput | null
  role?: prisma.Role | null
  role_not?: prisma.Role | null
  role_in?: prisma.Role[]
  role_not_in?: prisma.Role[]
  resetToken?: string | null
  resetToken_not?: string | null
  resetToken_in?: string[]
  resetToken_not_in?: string[]
  resetToken_lt?: string | null
  resetToken_lte?: string | null
  resetToken_gt?: string | null
  resetToken_gte?: string | null
  resetToken_contains?: string | null
  resetToken_not_contains?: string | null
  resetToken_starts_with?: string | null
  resetToken_not_starts_with?: string | null
  resetToken_ends_with?: string | null
  resetToken_not_ends_with?: string | null
  notificationSettings?: NotificationSettingsWhereInput | null
  AND?: UserWhereInput[]
  OR?: UserWhereInput[]
  NOT?: UserWhereInput[]
}
export type UserWhereInputInputObject =
  | Extract<keyof UserWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'phone_in', alias?: string  } 
  | { name: 'phone_not_in', alias?: string  } 
  | { name: 'phone_lt', alias?: string  } 
  | { name: 'phone_lte', alias?: string  } 
  | { name: 'phone_gt', alias?: string  } 
  | { name: 'phone_gte', alias?: string  } 
  | { name: 'phone_contains', alias?: string  } 
  | { name: 'phone_not_contains', alias?: string  } 
  | { name: 'phone_starts_with', alias?: string  } 
  | { name: 'phone_not_starts_with', alias?: string  } 
  | { name: 'phone_ends_with', alias?: string  } 
  | { name: 'phone_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'cart_every', alias?: string  } 
  | { name: 'cart_some', alias?: string  } 
  | { name: 'cart_none', alias?: string  } 
  | { name: 'orders_every', alias?: string  } 
  | { name: 'orders_some', alias?: string  } 
  | { name: 'orders_none', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'role_not', alias?: string  } 
  | { name: 'role_in', alias?: string  } 
  | { name: 'role_not_in', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'resetToken_not', alias?: string  } 
  | { name: 'resetToken_in', alias?: string  } 
  | { name: 'resetToken_not_in', alias?: string  } 
  | { name: 'resetToken_lt', alias?: string  } 
  | { name: 'resetToken_lte', alias?: string  } 
  | { name: 'resetToken_gt', alias?: string  } 
  | { name: 'resetToken_gte', alias?: string  } 
  | { name: 'resetToken_contains', alias?: string  } 
  | { name: 'resetToken_not_contains', alias?: string  } 
  | { name: 'resetToken_starts_with', alias?: string  } 
  | { name: 'resetToken_not_starts_with', alias?: string  } 
  | { name: 'resetToken_ends_with', alias?: string  } 
  | { name: 'resetToken_not_ends_with', alias?: string  } 
  | { name: 'notificationSettings', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  owner?: UserWhereInput | null
  items_every?: OrderItemWhereInput | null
  items_some?: OrderItemWhereInput | null
  items_none?: OrderItemWhereInput | null
  stripeId?: string | null
  stripeId_not?: string | null
  stripeId_in?: string[]
  stripeId_not_in?: string[]
  stripeId_lt?: string | null
  stripeId_lte?: string | null
  stripeId_gt?: string | null
  stripeId_gte?: string | null
  stripeId_contains?: string | null
  stripeId_not_contains?: string | null
  stripeId_starts_with?: string | null
  stripeId_not_starts_with?: string | null
  stripeId_ends_with?: string | null
  stripeId_not_ends_with?: string | null
  status?: prisma.OrderStatus | null
  status_not?: prisma.OrderStatus | null
  status_in?: prisma.OrderStatus[]
  status_not_in?: prisma.OrderStatus[]
  totalPrice?: number | null
  totalPrice_not?: number | null
  totalPrice_in?: number[]
  totalPrice_not_in?: number[]
  totalPrice_lt?: number | null
  totalPrice_lte?: number | null
  totalPrice_gt?: number | null
  totalPrice_gte?: number | null
  totalRefunded?: number | null
  totalRefunded_not?: number | null
  totalRefunded_in?: number[]
  totalRefunded_not_in?: number[]
  totalRefunded_lt?: number | null
  totalRefunded_lte?: number | null
  totalRefunded_gt?: number | null
  totalRefunded_gte?: number | null
  AND?: OrderWhereInput[]
  OR?: OrderWhereInput[]
  NOT?: OrderWhereInput[]
}
export type OrderWhereInputInputObject =
  | Extract<keyof OrderWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'items_every', alias?: string  } 
  | { name: 'items_some', alias?: string  } 
  | { name: 'items_none', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'stripeId_not', alias?: string  } 
  | { name: 'stripeId_in', alias?: string  } 
  | { name: 'stripeId_not_in', alias?: string  } 
  | { name: 'stripeId_lt', alias?: string  } 
  | { name: 'stripeId_lte', alias?: string  } 
  | { name: 'stripeId_gt', alias?: string  } 
  | { name: 'stripeId_gte', alias?: string  } 
  | { name: 'stripeId_contains', alias?: string  } 
  | { name: 'stripeId_not_contains', alias?: string  } 
  | { name: 'stripeId_starts_with', alias?: string  } 
  | { name: 'stripeId_not_starts_with', alias?: string  } 
  | { name: 'stripeId_ends_with', alias?: string  } 
  | { name: 'stripeId_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalPrice_not', alias?: string  } 
  | { name: 'totalPrice_in', alias?: string  } 
  | { name: 'totalPrice_not_in', alias?: string  } 
  | { name: 'totalPrice_lt', alias?: string  } 
  | { name: 'totalPrice_lte', alias?: string  } 
  | { name: 'totalPrice_gt', alias?: string  } 
  | { name: 'totalPrice_gte', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  | { name: 'totalRefunded_not', alias?: string  } 
  | { name: 'totalRefunded_in', alias?: string  } 
  | { name: 'totalRefunded_not_in', alias?: string  } 
  | { name: 'totalRefunded_lt', alias?: string  } 
  | { name: 'totalRefunded_lte', alias?: string  } 
  | { name: 'totalRefunded_gt', alias?: string  } 
  | { name: 'totalRefunded_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NotificationSettingsWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: boolean | null
  email_not?: boolean | null
  phone?: boolean | null
  phone_not?: boolean | null
  user?: UserWhereInput | null
  AND?: NotificationSettingsWhereInput[]
  OR?: NotificationSettingsWhereInput[]
  NOT?: NotificationSettingsWhereInput[]
}
export type NotificationSettingsWhereInputInputObject =
  | Extract<keyof NotificationSettingsWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'phone_not', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PredictionWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  startDate?: string | null
  startDate_not?: string | null
  startDate_in?: string[]
  startDate_not_in?: string[]
  startDate_lt?: string | null
  startDate_lte?: string | null
  startDate_gt?: string | null
  startDate_gte?: string | null
  package?: PackageWhereInput | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  home?: TeamWhereInput | null
  away?: TeamWhereInput | null
  winner?: TeamWhereInput | null
  AND?: PredictionWhereInput[]
  OR?: PredictionWhereInput[]
  NOT?: PredictionWhereInput[]
}
export type PredictionWhereInputInputObject =
  | Extract<keyof PredictionWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'startDate_not', alias?: string  } 
  | { name: 'startDate_in', alias?: string  } 
  | { name: 'startDate_not_in', alias?: string  } 
  | { name: 'startDate_lt', alias?: string  } 
  | { name: 'startDate_lte', alias?: string  } 
  | { name: 'startDate_gt', alias?: string  } 
  | { name: 'startDate_gte', alias?: string  } 
  | { name: 'package', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'home', alias?: string  } 
  | { name: 'away', alias?: string  } 
  | { name: 'winner', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamWhereUniqueInput {
  id?: string | null
  name?: string | null
  key?: string | null
}
export type TeamWhereUniqueInputInputObject =
  | Extract<keyof TeamWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  
export interface PackageWhereUniqueInput {
  id?: string | null
  name?: string | null
}
export type PackageWhereUniqueInputInputObject =
  | Extract<keyof PackageWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface OrderWhereUniqueInput {
  id?: string | null
}
export type OrderWhereUniqueInputInputObject =
  | Extract<keyof OrderWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface OrderItemWhereUniqueInput {
  id?: string | null
}
export type OrderItemWhereUniqueInputInputObject =
  | Extract<keyof OrderItemWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserWhereUniqueInput {
  id?: string | null
  email?: string | null
  phone?: string | null
}
export type UserWhereUniqueInputInputObject =
  | Extract<keyof UserWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  
export interface NotificationSettingsWhereUniqueInput {
  id?: string | null
}
export type NotificationSettingsWhereUniqueInputInputObject =
  | Extract<keyof NotificationSettingsWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface PredictionWhereUniqueInput {
  id?: string | null
}
export type PredictionWhereUniqueInputInputObject =
  | Extract<keyof PredictionWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface LeagueCreateInput {
  id?: string | null
  name?: string
  sport?: string
  seasonEndDate?: string
  packages?: PackageCreateManyWithoutLeagueInput | null
  teams?: TeamCreateManyWithoutLeagueInput | null
}
export type LeagueCreateInputInputObject =
  | Extract<keyof LeagueCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  | { name: 'packages', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  
export interface PackageCreateManyWithoutLeagueInput {
  create?: PackageCreateWithoutLeagueInput[]
  connect?: PackageWhereUniqueInput[]
}
export type PackageCreateManyWithoutLeagueInputInputObject =
  | Extract<keyof PackageCreateManyWithoutLeagueInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PackageCreateWithoutLeagueInput {
  id?: string | null
  name?: string
  description?: string | null
  price?: number
  image?: string | null
  orderItems?: OrderItemCreateManyWithoutPackageInput | null
  predictions?: PredictionCreateManyWithoutPackageInput | null
}
export type PackageCreateWithoutLeagueInputInputObject =
  | Extract<keyof PackageCreateWithoutLeagueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'orderItems', alias?: string  } 
  | { name: 'predictions', alias?: string  } 
  
export interface OrderItemCreateManyWithoutPackageInput {
  create?: OrderItemCreateWithoutPackageInput[]
  connect?: OrderItemWhereUniqueInput[]
}
export type OrderItemCreateManyWithoutPackageInputInputObject =
  | Extract<keyof OrderItemCreateManyWithoutPackageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderItemCreateWithoutPackageInput {
  id?: string | null
  expireAt?: string
  owner?: UserCreateOneWithoutCartInput | null
  order?: OrderCreateOneWithoutItemsInput | null
}
export type OrderItemCreateWithoutPackageInputInputObject =
  | Extract<keyof OrderItemCreateWithoutPackageInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'expireAt', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'order', alias?: string  } 
  
export interface UserCreateOneWithoutCartInput {
  create?: UserCreateWithoutCartInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutCartInputInputObject =
  | Extract<keyof UserCreateOneWithoutCartInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutCartInput {
  id?: string | null
  email?: string
  phone?: string
  password?: string
  orders?: OrderCreateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
}
export type UserCreateWithoutCartInputInputObject =
  | Extract<keyof UserCreateWithoutCartInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'orders', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'notificationSettings', alias?: string  } 
  
export interface OrderCreateManyWithoutOwnerInput {
  create?: OrderCreateWithoutOwnerInput[]
  connect?: OrderWhereUniqueInput[]
}
export type OrderCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof OrderCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderCreateWithoutOwnerInput {
  id?: string | null
  items?: OrderItemCreateManyWithoutOrderInput | null
  stripeId?: string
  status?: prisma.OrderStatus | null
  totalPrice?: number
  totalRefunded?: number
}
export type OrderCreateWithoutOwnerInputInputObject =
  | Extract<keyof OrderCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface OrderItemCreateManyWithoutOrderInput {
  create?: OrderItemCreateWithoutOrderInput[]
  connect?: OrderItemWhereUniqueInput[]
}
export type OrderItemCreateManyWithoutOrderInputInputObject =
  | Extract<keyof OrderItemCreateManyWithoutOrderInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderItemCreateWithoutOrderInput {
  id?: string | null
  expireAt?: string
  owner?: UserCreateOneWithoutCartInput | null
  package?: PackageCreateOneWithoutOrderItemsInput
}
export type OrderItemCreateWithoutOrderInputInputObject =
  | Extract<keyof OrderItemCreateWithoutOrderInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'expireAt', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'package', alias?: string  } 
  
export interface PackageCreateOneWithoutOrderItemsInput {
  create?: PackageCreateWithoutOrderItemsInput | null
  connect?: PackageWhereUniqueInput | null
}
export type PackageCreateOneWithoutOrderItemsInputInputObject =
  | Extract<keyof PackageCreateOneWithoutOrderItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PackageCreateWithoutOrderItemsInput {
  id?: string | null
  name?: string
  description?: string | null
  price?: number
  image?: string | null
  league?: LeagueCreateOneWithoutPackagesInput
  predictions?: PredictionCreateManyWithoutPackageInput | null
}
export type PackageCreateWithoutOrderItemsInputInputObject =
  | Extract<keyof PackageCreateWithoutOrderItemsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'predictions', alias?: string  } 
  
export interface LeagueCreateOneWithoutPackagesInput {
  create?: LeagueCreateWithoutPackagesInput | null
  connect?: LeagueWhereUniqueInput | null
}
export type LeagueCreateOneWithoutPackagesInputInputObject =
  | Extract<keyof LeagueCreateOneWithoutPackagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LeagueCreateWithoutPackagesInput {
  id?: string | null
  name?: string
  sport?: string
  seasonEndDate?: string
  teams?: TeamCreateManyWithoutLeagueInput | null
}
export type LeagueCreateWithoutPackagesInputInputObject =
  | Extract<keyof LeagueCreateWithoutPackagesInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  
export interface TeamCreateManyWithoutLeagueInput {
  create?: TeamCreateWithoutLeagueInput[]
  connect?: TeamWhereUniqueInput[]
}
export type TeamCreateManyWithoutLeagueInputInputObject =
  | Extract<keyof TeamCreateManyWithoutLeagueInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamCreateWithoutLeagueInput {
  id?: string | null
  name?: string
  key?: string
}
export type TeamCreateWithoutLeagueInputInputObject =
  | Extract<keyof TeamCreateWithoutLeagueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  
export interface PredictionCreateManyWithoutPackageInput {
  create?: PredictionCreateWithoutPackageInput[]
  connect?: PredictionWhereUniqueInput[]
}
export type PredictionCreateManyWithoutPackageInputInputObject =
  | Extract<keyof PredictionCreateManyWithoutPackageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PredictionCreateWithoutPackageInput {
  id?: string | null
  startDate?: string
  name?: string
  home?: TeamCreateOneInput
  away?: TeamCreateOneInput
  winner?: TeamCreateOneInput
}
export type PredictionCreateWithoutPackageInputInputObject =
  | Extract<keyof PredictionCreateWithoutPackageInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'home', alias?: string  } 
  | { name: 'away', alias?: string  } 
  | { name: 'winner', alias?: string  } 
  
export interface TeamCreateOneInput {
  create?: TeamCreateInput | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamCreateOneInputInputObject =
  | Extract<keyof TeamCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamCreateInput {
  id?: string | null
  name?: string
  key?: string
  league?: LeagueCreateOneWithoutTeamsInput
}
export type TeamCreateInputInputObject =
  | Extract<keyof TeamCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'league', alias?: string  } 
  
export interface LeagueCreateOneWithoutTeamsInput {
  create?: LeagueCreateWithoutTeamsInput | null
  connect?: LeagueWhereUniqueInput | null
}
export type LeagueCreateOneWithoutTeamsInputInputObject =
  | Extract<keyof LeagueCreateOneWithoutTeamsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LeagueCreateWithoutTeamsInput {
  id?: string | null
  name?: string
  sport?: string
  seasonEndDate?: string
  packages?: PackageCreateManyWithoutLeagueInput | null
}
export type LeagueCreateWithoutTeamsInputInputObject =
  | Extract<keyof LeagueCreateWithoutTeamsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  | { name: 'packages', alias?: string  } 
  
export interface NotificationSettingsCreateOneWithoutUserInput {
  create?: NotificationSettingsCreateWithoutUserInput | null
  connect?: NotificationSettingsWhereUniqueInput | null
}
export type NotificationSettingsCreateOneWithoutUserInputInputObject =
  | Extract<keyof NotificationSettingsCreateOneWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NotificationSettingsCreateWithoutUserInput {
  id?: string | null
  email?: boolean | null
  phone?: boolean | null
}
export type NotificationSettingsCreateWithoutUserInputInputObject =
  | Extract<keyof NotificationSettingsCreateWithoutUserInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  
export interface OrderCreateOneWithoutItemsInput {
  create?: OrderCreateWithoutItemsInput | null
  connect?: OrderWhereUniqueInput | null
}
export type OrderCreateOneWithoutItemsInputInputObject =
  | Extract<keyof OrderCreateOneWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderCreateWithoutItemsInput {
  id?: string | null
  owner?: UserCreateOneWithoutOrdersInput
  stripeId?: string
  status?: prisma.OrderStatus | null
  totalPrice?: number
  totalRefunded?: number
}
export type OrderCreateWithoutItemsInputInputObject =
  | Extract<keyof OrderCreateWithoutItemsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface UserCreateOneWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutOrdersInputInputObject =
  | Extract<keyof UserCreateOneWithoutOrdersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutOrdersInput {
  id?: string | null
  email?: string
  phone?: string
  password?: string
  cart?: OrderItemCreateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
}
export type UserCreateWithoutOrdersInputInputObject =
  | Extract<keyof UserCreateWithoutOrdersInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'notificationSettings', alias?: string  } 
  
export interface OrderItemCreateManyWithoutOwnerInput {
  create?: OrderItemCreateWithoutOwnerInput[]
  connect?: OrderItemWhereUniqueInput[]
}
export type OrderItemCreateManyWithoutOwnerInputInputObject =
  | Extract<keyof OrderItemCreateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderItemCreateWithoutOwnerInput {
  id?: string | null
  expireAt?: string
  order?: OrderCreateOneWithoutItemsInput | null
  package?: PackageCreateOneWithoutOrderItemsInput
}
export type OrderItemCreateWithoutOwnerInputInputObject =
  | Extract<keyof OrderItemCreateWithoutOwnerInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'expireAt', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'package', alias?: string  } 
  
export interface LeagueUpdateInput {
  name?: string | null
  sport?: string | null
  seasonEndDate?: string | null
  packages?: PackageUpdateManyWithoutLeagueInput | null
  teams?: TeamUpdateManyWithoutLeagueInput | null
}
export type LeagueUpdateInputInputObject =
  | Extract<keyof LeagueUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  | { name: 'packages', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  
export interface PackageUpdateManyWithoutLeagueInput {
  create?: PackageCreateWithoutLeagueInput[]
  delete?: PackageWhereUniqueInput[]
  connect?: PackageWhereUniqueInput[]
  set?: PackageWhereUniqueInput[]
  disconnect?: PackageWhereUniqueInput[]
  update?: PackageUpdateWithWhereUniqueWithoutLeagueInput[]
  upsert?: PackageUpsertWithWhereUniqueWithoutLeagueInput[]
  deleteMany?: PackageScalarWhereInput[]
  updateMany?: PackageUpdateManyWithWhereNestedInput[]
}
export type PackageUpdateManyWithoutLeagueInputInputObject =
  | Extract<keyof PackageUpdateManyWithoutLeagueInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PackageUpdateWithWhereUniqueWithoutLeagueInput {
  where?: PackageWhereUniqueInput
  data?: PackageUpdateWithoutLeagueDataInput
}
export type PackageUpdateWithWhereUniqueWithoutLeagueInputInputObject =
  | Extract<keyof PackageUpdateWithWhereUniqueWithoutLeagueInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PackageUpdateWithoutLeagueDataInput {
  name?: string | null
  description?: string | null
  price?: number | null
  image?: string | null
  orderItems?: OrderItemUpdateManyWithoutPackageInput | null
  predictions?: PredictionUpdateManyWithoutPackageInput | null
}
export type PackageUpdateWithoutLeagueDataInputInputObject =
  | Extract<keyof PackageUpdateWithoutLeagueDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'orderItems', alias?: string  } 
  | { name: 'predictions', alias?: string  } 
  
export interface OrderItemUpdateManyWithoutPackageInput {
  create?: OrderItemCreateWithoutPackageInput[]
  delete?: OrderItemWhereUniqueInput[]
  connect?: OrderItemWhereUniqueInput[]
  set?: OrderItemWhereUniqueInput[]
  disconnect?: OrderItemWhereUniqueInput[]
  update?: OrderItemUpdateWithWhereUniqueWithoutPackageInput[]
  upsert?: OrderItemUpsertWithWhereUniqueWithoutPackageInput[]
  deleteMany?: OrderItemScalarWhereInput[]
  updateMany?: OrderItemUpdateManyWithWhereNestedInput[]
}
export type OrderItemUpdateManyWithoutPackageInputInputObject =
  | Extract<keyof OrderItemUpdateManyWithoutPackageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OrderItemUpdateWithWhereUniqueWithoutPackageInput {
  where?: OrderItemWhereUniqueInput
  data?: OrderItemUpdateWithoutPackageDataInput
}
export type OrderItemUpdateWithWhereUniqueWithoutPackageInputInputObject =
  | Extract<keyof OrderItemUpdateWithWhereUniqueWithoutPackageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderItemUpdateWithoutPackageDataInput {
  expireAt?: string | null
  owner?: UserUpdateOneWithoutCartInput | null
  order?: OrderUpdateOneWithoutItemsInput | null
}
export type OrderItemUpdateWithoutPackageDataInputInputObject =
  | Extract<keyof OrderItemUpdateWithoutPackageDataInput, string>
  | { name: 'expireAt', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'order', alias?: string  } 
  
export interface UserUpdateOneWithoutCartInput {
  create?: UserCreateWithoutCartInput | null
  update?: UserUpdateWithoutCartDataInput | null
  upsert?: UserUpsertWithoutCartInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutCartInputInputObject =
  | Extract<keyof UserUpdateOneWithoutCartInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutCartDataInput {
  email?: string | null
  phone?: string | null
  password?: string | null
  orders?: OrderUpdateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  notificationSettings?: NotificationSettingsUpdateOneRequiredWithoutUserInput | null
}
export type UserUpdateWithoutCartDataInputInputObject =
  | Extract<keyof UserUpdateWithoutCartDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'orders', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'notificationSettings', alias?: string  } 
  
export interface OrderUpdateManyWithoutOwnerInput {
  create?: OrderCreateWithoutOwnerInput[]
  delete?: OrderWhereUniqueInput[]
  connect?: OrderWhereUniqueInput[]
  set?: OrderWhereUniqueInput[]
  disconnect?: OrderWhereUniqueInput[]
  update?: OrderUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: OrderUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: OrderScalarWhereInput[]
  updateMany?: OrderUpdateManyWithWhereNestedInput[]
}
export type OrderUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof OrderUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OrderUpdateWithWhereUniqueWithoutOwnerInput {
  where?: OrderWhereUniqueInput
  data?: OrderUpdateWithoutOwnerDataInput
}
export type OrderUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof OrderUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderUpdateWithoutOwnerDataInput {
  items?: OrderItemUpdateManyWithoutOrderInput | null
  stripeId?: string | null
  status?: prisma.OrderStatus | null
  totalPrice?: number | null
  totalRefunded?: number | null
}
export type OrderUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof OrderUpdateWithoutOwnerDataInput, string>
  | { name: 'items', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface OrderItemUpdateManyWithoutOrderInput {
  create?: OrderItemCreateWithoutOrderInput[]
  delete?: OrderItemWhereUniqueInput[]
  connect?: OrderItemWhereUniqueInput[]
  set?: OrderItemWhereUniqueInput[]
  disconnect?: OrderItemWhereUniqueInput[]
  update?: OrderItemUpdateWithWhereUniqueWithoutOrderInput[]
  upsert?: OrderItemUpsertWithWhereUniqueWithoutOrderInput[]
  deleteMany?: OrderItemScalarWhereInput[]
  updateMany?: OrderItemUpdateManyWithWhereNestedInput[]
}
export type OrderItemUpdateManyWithoutOrderInputInputObject =
  | Extract<keyof OrderItemUpdateManyWithoutOrderInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  where?: OrderItemWhereUniqueInput
  data?: OrderItemUpdateWithoutOrderDataInput
}
export type OrderItemUpdateWithWhereUniqueWithoutOrderInputInputObject =
  | Extract<keyof OrderItemUpdateWithWhereUniqueWithoutOrderInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderItemUpdateWithoutOrderDataInput {
  expireAt?: string | null
  owner?: UserUpdateOneWithoutCartInput | null
  package?: PackageUpdateOneRequiredWithoutOrderItemsInput | null
}
export type OrderItemUpdateWithoutOrderDataInputInputObject =
  | Extract<keyof OrderItemUpdateWithoutOrderDataInput, string>
  | { name: 'expireAt', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'package', alias?: string  } 
  
export interface PackageUpdateOneRequiredWithoutOrderItemsInput {
  create?: PackageCreateWithoutOrderItemsInput | null
  update?: PackageUpdateWithoutOrderItemsDataInput | null
  upsert?: PackageUpsertWithoutOrderItemsInput | null
  connect?: PackageWhereUniqueInput | null
}
export type PackageUpdateOneRequiredWithoutOrderItemsInputInputObject =
  | Extract<keyof PackageUpdateOneRequiredWithoutOrderItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PackageUpdateWithoutOrderItemsDataInput {
  name?: string | null
  description?: string | null
  price?: number | null
  image?: string | null
  league?: LeagueUpdateOneRequiredWithoutPackagesInput | null
  predictions?: PredictionUpdateManyWithoutPackageInput | null
}
export type PackageUpdateWithoutOrderItemsDataInputInputObject =
  | Extract<keyof PackageUpdateWithoutOrderItemsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'predictions', alias?: string  } 
  
export interface LeagueUpdateOneRequiredWithoutPackagesInput {
  create?: LeagueCreateWithoutPackagesInput | null
  update?: LeagueUpdateWithoutPackagesDataInput | null
  upsert?: LeagueUpsertWithoutPackagesInput | null
  connect?: LeagueWhereUniqueInput | null
}
export type LeagueUpdateOneRequiredWithoutPackagesInputInputObject =
  | Extract<keyof LeagueUpdateOneRequiredWithoutPackagesInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LeagueUpdateWithoutPackagesDataInput {
  name?: string | null
  sport?: string | null
  seasonEndDate?: string | null
  teams?: TeamUpdateManyWithoutLeagueInput | null
}
export type LeagueUpdateWithoutPackagesDataInputInputObject =
  | Extract<keyof LeagueUpdateWithoutPackagesDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  | { name: 'teams', alias?: string  } 
  
export interface TeamUpdateManyWithoutLeagueInput {
  create?: TeamCreateWithoutLeagueInput[]
  delete?: TeamWhereUniqueInput[]
  connect?: TeamWhereUniqueInput[]
  set?: TeamWhereUniqueInput[]
  disconnect?: TeamWhereUniqueInput[]
  update?: TeamUpdateWithWhereUniqueWithoutLeagueInput[]
  upsert?: TeamUpsertWithWhereUniqueWithoutLeagueInput[]
  deleteMany?: TeamScalarWhereInput[]
  updateMany?: TeamUpdateManyWithWhereNestedInput[]
}
export type TeamUpdateManyWithoutLeagueInputInputObject =
  | Extract<keyof TeamUpdateManyWithoutLeagueInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface TeamUpdateWithWhereUniqueWithoutLeagueInput {
  where?: TeamWhereUniqueInput
  data?: TeamUpdateWithoutLeagueDataInput
}
export type TeamUpdateWithWhereUniqueWithoutLeagueInputInputObject =
  | Extract<keyof TeamUpdateWithWhereUniqueWithoutLeagueInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TeamUpdateWithoutLeagueDataInput {
  name?: string | null
  key?: string | null
}
export type TeamUpdateWithoutLeagueDataInputInputObject =
  | Extract<keyof TeamUpdateWithoutLeagueDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  
export interface TeamUpsertWithWhereUniqueWithoutLeagueInput {
  where?: TeamWhereUniqueInput
  update?: TeamUpdateWithoutLeagueDataInput
  create?: TeamCreateWithoutLeagueInput
}
export type TeamUpsertWithWhereUniqueWithoutLeagueInputInputObject =
  | Extract<keyof TeamUpsertWithWhereUniqueWithoutLeagueInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  key?: string | null
  key_not?: string | null
  key_in?: string[]
  key_not_in?: string[]
  key_lt?: string | null
  key_lte?: string | null
  key_gt?: string | null
  key_gte?: string | null
  key_contains?: string | null
  key_not_contains?: string | null
  key_starts_with?: string | null
  key_not_starts_with?: string | null
  key_ends_with?: string | null
  key_not_ends_with?: string | null
  AND?: TeamScalarWhereInput[]
  OR?: TeamScalarWhereInput[]
  NOT?: TeamScalarWhereInput[]
}
export type TeamScalarWhereInputInputObject =
  | Extract<keyof TeamScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'key_not', alias?: string  } 
  | { name: 'key_in', alias?: string  } 
  | { name: 'key_not_in', alias?: string  } 
  | { name: 'key_lt', alias?: string  } 
  | { name: 'key_lte', alias?: string  } 
  | { name: 'key_gt', alias?: string  } 
  | { name: 'key_gte', alias?: string  } 
  | { name: 'key_contains', alias?: string  } 
  | { name: 'key_not_contains', alias?: string  } 
  | { name: 'key_starts_with', alias?: string  } 
  | { name: 'key_not_starts_with', alias?: string  } 
  | { name: 'key_ends_with', alias?: string  } 
  | { name: 'key_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamUpdateManyWithWhereNestedInput {
  where?: TeamScalarWhereInput
  data?: TeamUpdateManyDataInput
}
export type TeamUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof TeamUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface TeamUpdateManyDataInput {
  name?: string | null
  key?: string | null
}
export type TeamUpdateManyDataInputInputObject =
  | Extract<keyof TeamUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  
export interface LeagueUpsertWithoutPackagesInput {
  update?: LeagueUpdateWithoutPackagesDataInput
  create?: LeagueCreateWithoutPackagesInput
}
export type LeagueUpsertWithoutPackagesInputInputObject =
  | Extract<keyof LeagueUpsertWithoutPackagesInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PredictionUpdateManyWithoutPackageInput {
  create?: PredictionCreateWithoutPackageInput[]
  delete?: PredictionWhereUniqueInput[]
  connect?: PredictionWhereUniqueInput[]
  set?: PredictionWhereUniqueInput[]
  disconnect?: PredictionWhereUniqueInput[]
  update?: PredictionUpdateWithWhereUniqueWithoutPackageInput[]
  upsert?: PredictionUpsertWithWhereUniqueWithoutPackageInput[]
  deleteMany?: PredictionScalarWhereInput[]
  updateMany?: PredictionUpdateManyWithWhereNestedInput[]
}
export type PredictionUpdateManyWithoutPackageInputInputObject =
  | Extract<keyof PredictionUpdateManyWithoutPackageInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PredictionUpdateWithWhereUniqueWithoutPackageInput {
  where?: PredictionWhereUniqueInput
  data?: PredictionUpdateWithoutPackageDataInput
}
export type PredictionUpdateWithWhereUniqueWithoutPackageInputInputObject =
  | Extract<keyof PredictionUpdateWithWhereUniqueWithoutPackageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PredictionUpdateWithoutPackageDataInput {
  startDate?: string | null
  name?: string | null
  home?: TeamUpdateOneRequiredInput | null
  away?: TeamUpdateOneRequiredInput | null
  winner?: TeamUpdateOneRequiredInput | null
}
export type PredictionUpdateWithoutPackageDataInputInputObject =
  | Extract<keyof PredictionUpdateWithoutPackageDataInput, string>
  | { name: 'startDate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'home', alias?: string  } 
  | { name: 'away', alias?: string  } 
  | { name: 'winner', alias?: string  } 
  
export interface TeamUpdateOneRequiredInput {
  create?: TeamCreateInput | null
  update?: TeamUpdateDataInput | null
  upsert?: TeamUpsertNestedInput | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamUpdateOneRequiredInputInputObject =
  | Extract<keyof TeamUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamUpdateDataInput {
  name?: string | null
  key?: string | null
  league?: LeagueUpdateOneRequiredWithoutTeamsInput | null
}
export type TeamUpdateDataInputInputObject =
  | Extract<keyof TeamUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'league', alias?: string  } 
  
export interface LeagueUpdateOneRequiredWithoutTeamsInput {
  create?: LeagueCreateWithoutTeamsInput | null
  update?: LeagueUpdateWithoutTeamsDataInput | null
  upsert?: LeagueUpsertWithoutTeamsInput | null
  connect?: LeagueWhereUniqueInput | null
}
export type LeagueUpdateOneRequiredWithoutTeamsInputInputObject =
  | Extract<keyof LeagueUpdateOneRequiredWithoutTeamsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface LeagueUpdateWithoutTeamsDataInput {
  name?: string | null
  sport?: string | null
  seasonEndDate?: string | null
  packages?: PackageUpdateManyWithoutLeagueInput | null
}
export type LeagueUpdateWithoutTeamsDataInputInputObject =
  | Extract<keyof LeagueUpdateWithoutTeamsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  | { name: 'packages', alias?: string  } 
  
export interface LeagueUpsertWithoutTeamsInput {
  update?: LeagueUpdateWithoutTeamsDataInput
  create?: LeagueCreateWithoutTeamsInput
}
export type LeagueUpsertWithoutTeamsInputInputObject =
  | Extract<keyof LeagueUpsertWithoutTeamsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamUpsertNestedInput {
  update?: TeamUpdateDataInput
  create?: TeamCreateInput
}
export type TeamUpsertNestedInputInputObject =
  | Extract<keyof TeamUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PredictionUpsertWithWhereUniqueWithoutPackageInput {
  where?: PredictionWhereUniqueInput
  update?: PredictionUpdateWithoutPackageDataInput
  create?: PredictionCreateWithoutPackageInput
}
export type PredictionUpsertWithWhereUniqueWithoutPackageInputInputObject =
  | Extract<keyof PredictionUpsertWithWhereUniqueWithoutPackageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PredictionScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  startDate?: string | null
  startDate_not?: string | null
  startDate_in?: string[]
  startDate_not_in?: string[]
  startDate_lt?: string | null
  startDate_lte?: string | null
  startDate_gt?: string | null
  startDate_gte?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: PredictionScalarWhereInput[]
  OR?: PredictionScalarWhereInput[]
  NOT?: PredictionScalarWhereInput[]
}
export type PredictionScalarWhereInputInputObject =
  | Extract<keyof PredictionScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'startDate_not', alias?: string  } 
  | { name: 'startDate_in', alias?: string  } 
  | { name: 'startDate_not_in', alias?: string  } 
  | { name: 'startDate_lt', alias?: string  } 
  | { name: 'startDate_lte', alias?: string  } 
  | { name: 'startDate_gt', alias?: string  } 
  | { name: 'startDate_gte', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PredictionUpdateManyWithWhereNestedInput {
  where?: PredictionScalarWhereInput
  data?: PredictionUpdateManyDataInput
}
export type PredictionUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PredictionUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PredictionUpdateManyDataInput {
  startDate?: string | null
  name?: string | null
}
export type PredictionUpdateManyDataInputInputObject =
  | Extract<keyof PredictionUpdateManyDataInput, string>
  | { name: 'startDate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PackageUpsertWithoutOrderItemsInput {
  update?: PackageUpdateWithoutOrderItemsDataInput
  create?: PackageCreateWithoutOrderItemsInput
}
export type PackageUpsertWithoutOrderItemsInputInputObject =
  | Extract<keyof PackageUpsertWithoutOrderItemsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  where?: OrderItemWhereUniqueInput
  update?: OrderItemUpdateWithoutOrderDataInput
  create?: OrderItemCreateWithoutOrderInput
}
export type OrderItemUpsertWithWhereUniqueWithoutOrderInputInputObject =
  | Extract<keyof OrderItemUpsertWithWhereUniqueWithoutOrderInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderItemScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  expireAt?: string | null
  expireAt_not?: string | null
  expireAt_in?: string[]
  expireAt_not_in?: string[]
  expireAt_lt?: string | null
  expireAt_lte?: string | null
  expireAt_gt?: string | null
  expireAt_gte?: string | null
  AND?: OrderItemScalarWhereInput[]
  OR?: OrderItemScalarWhereInput[]
  NOT?: OrderItemScalarWhereInput[]
}
export type OrderItemScalarWhereInputInputObject =
  | Extract<keyof OrderItemScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'expireAt', alias?: string  } 
  | { name: 'expireAt_not', alias?: string  } 
  | { name: 'expireAt_in', alias?: string  } 
  | { name: 'expireAt_not_in', alias?: string  } 
  | { name: 'expireAt_lt', alias?: string  } 
  | { name: 'expireAt_lte', alias?: string  } 
  | { name: 'expireAt_gt', alias?: string  } 
  | { name: 'expireAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderItemUpdateManyWithWhereNestedInput {
  where?: OrderItemScalarWhereInput
  data?: OrderItemUpdateManyDataInput
}
export type OrderItemUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof OrderItemUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderItemUpdateManyDataInput {
  expireAt?: string | null
}
export type OrderItemUpdateManyDataInputInputObject =
  | Extract<keyof OrderItemUpdateManyDataInput, string>
  | { name: 'expireAt', alias?: string  } 
  
export interface OrderUpsertWithWhereUniqueWithoutOwnerInput {
  where?: OrderWhereUniqueInput
  update?: OrderUpdateWithoutOwnerDataInput
  create?: OrderCreateWithoutOwnerInput
}
export type OrderUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof OrderUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  stripeId?: string | null
  stripeId_not?: string | null
  stripeId_in?: string[]
  stripeId_not_in?: string[]
  stripeId_lt?: string | null
  stripeId_lte?: string | null
  stripeId_gt?: string | null
  stripeId_gte?: string | null
  stripeId_contains?: string | null
  stripeId_not_contains?: string | null
  stripeId_starts_with?: string | null
  stripeId_not_starts_with?: string | null
  stripeId_ends_with?: string | null
  stripeId_not_ends_with?: string | null
  status?: prisma.OrderStatus | null
  status_not?: prisma.OrderStatus | null
  status_in?: prisma.OrderStatus[]
  status_not_in?: prisma.OrderStatus[]
  totalPrice?: number | null
  totalPrice_not?: number | null
  totalPrice_in?: number[]
  totalPrice_not_in?: number[]
  totalPrice_lt?: number | null
  totalPrice_lte?: number | null
  totalPrice_gt?: number | null
  totalPrice_gte?: number | null
  totalRefunded?: number | null
  totalRefunded_not?: number | null
  totalRefunded_in?: number[]
  totalRefunded_not_in?: number[]
  totalRefunded_lt?: number | null
  totalRefunded_lte?: number | null
  totalRefunded_gt?: number | null
  totalRefunded_gte?: number | null
  AND?: OrderScalarWhereInput[]
  OR?: OrderScalarWhereInput[]
  NOT?: OrderScalarWhereInput[]
}
export type OrderScalarWhereInputInputObject =
  | Extract<keyof OrderScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'stripeId_not', alias?: string  } 
  | { name: 'stripeId_in', alias?: string  } 
  | { name: 'stripeId_not_in', alias?: string  } 
  | { name: 'stripeId_lt', alias?: string  } 
  | { name: 'stripeId_lte', alias?: string  } 
  | { name: 'stripeId_gt', alias?: string  } 
  | { name: 'stripeId_gte', alias?: string  } 
  | { name: 'stripeId_contains', alias?: string  } 
  | { name: 'stripeId_not_contains', alias?: string  } 
  | { name: 'stripeId_starts_with', alias?: string  } 
  | { name: 'stripeId_not_starts_with', alias?: string  } 
  | { name: 'stripeId_ends_with', alias?: string  } 
  | { name: 'stripeId_not_ends_with', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'status_not', alias?: string  } 
  | { name: 'status_in', alias?: string  } 
  | { name: 'status_not_in', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalPrice_not', alias?: string  } 
  | { name: 'totalPrice_in', alias?: string  } 
  | { name: 'totalPrice_not_in', alias?: string  } 
  | { name: 'totalPrice_lt', alias?: string  } 
  | { name: 'totalPrice_lte', alias?: string  } 
  | { name: 'totalPrice_gt', alias?: string  } 
  | { name: 'totalPrice_gte', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  | { name: 'totalRefunded_not', alias?: string  } 
  | { name: 'totalRefunded_in', alias?: string  } 
  | { name: 'totalRefunded_not_in', alias?: string  } 
  | { name: 'totalRefunded_lt', alias?: string  } 
  | { name: 'totalRefunded_lte', alias?: string  } 
  | { name: 'totalRefunded_gt', alias?: string  } 
  | { name: 'totalRefunded_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderUpdateManyWithWhereNestedInput {
  where?: OrderScalarWhereInput
  data?: OrderUpdateManyDataInput
}
export type OrderUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof OrderUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderUpdateManyDataInput {
  stripeId?: string | null
  status?: prisma.OrderStatus | null
  totalPrice?: number | null
  totalRefunded?: number | null
}
export type OrderUpdateManyDataInputInputObject =
  | Extract<keyof OrderUpdateManyDataInput, string>
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface NotificationSettingsUpdateOneRequiredWithoutUserInput {
  create?: NotificationSettingsCreateWithoutUserInput | null
  update?: NotificationSettingsUpdateWithoutUserDataInput | null
  upsert?: NotificationSettingsUpsertWithoutUserInput | null
  connect?: NotificationSettingsWhereUniqueInput | null
}
export type NotificationSettingsUpdateOneRequiredWithoutUserInputInputObject =
  | Extract<keyof NotificationSettingsUpdateOneRequiredWithoutUserInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface NotificationSettingsUpdateWithoutUserDataInput {
  email?: boolean | null
  phone?: boolean | null
}
export type NotificationSettingsUpdateWithoutUserDataInputInputObject =
  | Extract<keyof NotificationSettingsUpdateWithoutUserDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  
export interface NotificationSettingsUpsertWithoutUserInput {
  update?: NotificationSettingsUpdateWithoutUserDataInput
  create?: NotificationSettingsCreateWithoutUserInput
}
export type NotificationSettingsUpsertWithoutUserInputInputObject =
  | Extract<keyof NotificationSettingsUpsertWithoutUserInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithoutCartInput {
  update?: UserUpdateWithoutCartDataInput
  create?: UserCreateWithoutCartInput
}
export type UserUpsertWithoutCartInputInputObject =
  | Extract<keyof UserUpsertWithoutCartInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderUpdateOneWithoutItemsInput {
  create?: OrderCreateWithoutItemsInput | null
  update?: OrderUpdateWithoutItemsDataInput | null
  upsert?: OrderUpsertWithoutItemsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: OrderWhereUniqueInput | null
}
export type OrderUpdateOneWithoutItemsInputInputObject =
  | Extract<keyof OrderUpdateOneWithoutItemsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface OrderUpdateWithoutItemsDataInput {
  owner?: UserUpdateOneRequiredWithoutOrdersInput | null
  stripeId?: string | null
  status?: prisma.OrderStatus | null
  totalPrice?: number | null
  totalRefunded?: number | null
}
export type OrderUpdateWithoutItemsDataInputInputObject =
  | Extract<keyof OrderUpdateWithoutItemsDataInput, string>
  | { name: 'owner', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface UserUpdateOneRequiredWithoutOrdersInput {
  create?: UserCreateWithoutOrdersInput | null
  update?: UserUpdateWithoutOrdersDataInput | null
  upsert?: UserUpsertWithoutOrdersInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneRequiredWithoutOrdersInputInputObject =
  | Extract<keyof UserUpdateOneRequiredWithoutOrdersInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutOrdersDataInput {
  email?: string | null
  phone?: string | null
  password?: string | null
  cart?: OrderItemUpdateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  notificationSettings?: NotificationSettingsUpdateOneRequiredWithoutUserInput | null
}
export type UserUpdateWithoutOrdersDataInputInputObject =
  | Extract<keyof UserUpdateWithoutOrdersDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'notificationSettings', alias?: string  } 
  
export interface OrderItemUpdateManyWithoutOwnerInput {
  create?: OrderItemCreateWithoutOwnerInput[]
  delete?: OrderItemWhereUniqueInput[]
  connect?: OrderItemWhereUniqueInput[]
  set?: OrderItemWhereUniqueInput[]
  disconnect?: OrderItemWhereUniqueInput[]
  update?: OrderItemUpdateWithWhereUniqueWithoutOwnerInput[]
  upsert?: OrderItemUpsertWithWhereUniqueWithoutOwnerInput[]
  deleteMany?: OrderItemScalarWhereInput[]
  updateMany?: OrderItemUpdateManyWithWhereNestedInput[]
}
export type OrderItemUpdateManyWithoutOwnerInputInputObject =
  | Extract<keyof OrderItemUpdateManyWithoutOwnerInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface OrderItemUpdateWithWhereUniqueWithoutOwnerInput {
  where?: OrderItemWhereUniqueInput
  data?: OrderItemUpdateWithoutOwnerDataInput
}
export type OrderItemUpdateWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof OrderItemUpdateWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface OrderItemUpdateWithoutOwnerDataInput {
  expireAt?: string | null
  order?: OrderUpdateOneWithoutItemsInput | null
  package?: PackageUpdateOneRequiredWithoutOrderItemsInput | null
}
export type OrderItemUpdateWithoutOwnerDataInputInputObject =
  | Extract<keyof OrderItemUpdateWithoutOwnerDataInput, string>
  | { name: 'expireAt', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'package', alias?: string  } 
  
export interface OrderItemUpsertWithWhereUniqueWithoutOwnerInput {
  where?: OrderItemWhereUniqueInput
  update?: OrderItemUpdateWithoutOwnerDataInput
  create?: OrderItemCreateWithoutOwnerInput
}
export type OrderItemUpsertWithWhereUniqueWithoutOwnerInputInputObject =
  | Extract<keyof OrderItemUpsertWithWhereUniqueWithoutOwnerInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserUpsertWithoutOrdersInput {
  update?: UserUpdateWithoutOrdersDataInput
  create?: UserCreateWithoutOrdersInput
}
export type UserUpsertWithoutOrdersInputInputObject =
  | Extract<keyof UserUpsertWithoutOrdersInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderUpsertWithoutItemsInput {
  update?: OrderUpdateWithoutItemsDataInput
  create?: OrderCreateWithoutItemsInput
}
export type OrderUpsertWithoutItemsInputInputObject =
  | Extract<keyof OrderUpsertWithoutItemsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface OrderItemUpsertWithWhereUniqueWithoutPackageInput {
  where?: OrderItemWhereUniqueInput
  update?: OrderItemUpdateWithoutPackageDataInput
  create?: OrderItemCreateWithoutPackageInput
}
export type OrderItemUpsertWithWhereUniqueWithoutPackageInputInputObject =
  | Extract<keyof OrderItemUpsertWithWhereUniqueWithoutPackageInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PackageUpsertWithWhereUniqueWithoutLeagueInput {
  where?: PackageWhereUniqueInput
  update?: PackageUpdateWithoutLeagueDataInput
  create?: PackageCreateWithoutLeagueInput
}
export type PackageUpsertWithWhereUniqueWithoutLeagueInputInputObject =
  | Extract<keyof PackageUpsertWithWhereUniqueWithoutLeagueInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PackageScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  description?: string | null
  description_not?: string | null
  description_in?: string[]
  description_not_in?: string[]
  description_lt?: string | null
  description_lte?: string | null
  description_gt?: string | null
  description_gte?: string | null
  description_contains?: string | null
  description_not_contains?: string | null
  description_starts_with?: string | null
  description_not_starts_with?: string | null
  description_ends_with?: string | null
  description_not_ends_with?: string | null
  price?: number | null
  price_not?: number | null
  price_in?: number[]
  price_not_in?: number[]
  price_lt?: number | null
  price_lte?: number | null
  price_gt?: number | null
  price_gte?: number | null
  image?: string | null
  image_not?: string | null
  image_in?: string[]
  image_not_in?: string[]
  image_lt?: string | null
  image_lte?: string | null
  image_gt?: string | null
  image_gte?: string | null
  image_contains?: string | null
  image_not_contains?: string | null
  image_starts_with?: string | null
  image_not_starts_with?: string | null
  image_ends_with?: string | null
  image_not_ends_with?: string | null
  AND?: PackageScalarWhereInput[]
  OR?: PackageScalarWhereInput[]
  NOT?: PackageScalarWhereInput[]
}
export type PackageScalarWhereInputInputObject =
  | Extract<keyof PackageScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'description_not', alias?: string  } 
  | { name: 'description_in', alias?: string  } 
  | { name: 'description_not_in', alias?: string  } 
  | { name: 'description_lt', alias?: string  } 
  | { name: 'description_lte', alias?: string  } 
  | { name: 'description_gt', alias?: string  } 
  | { name: 'description_gte', alias?: string  } 
  | { name: 'description_contains', alias?: string  } 
  | { name: 'description_not_contains', alias?: string  } 
  | { name: 'description_starts_with', alias?: string  } 
  | { name: 'description_not_starts_with', alias?: string  } 
  | { name: 'description_ends_with', alias?: string  } 
  | { name: 'description_not_ends_with', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'price_not', alias?: string  } 
  | { name: 'price_in', alias?: string  } 
  | { name: 'price_not_in', alias?: string  } 
  | { name: 'price_lt', alias?: string  } 
  | { name: 'price_lte', alias?: string  } 
  | { name: 'price_gt', alias?: string  } 
  | { name: 'price_gte', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'image_not', alias?: string  } 
  | { name: 'image_in', alias?: string  } 
  | { name: 'image_not_in', alias?: string  } 
  | { name: 'image_lt', alias?: string  } 
  | { name: 'image_lte', alias?: string  } 
  | { name: 'image_gt', alias?: string  } 
  | { name: 'image_gte', alias?: string  } 
  | { name: 'image_contains', alias?: string  } 
  | { name: 'image_not_contains', alias?: string  } 
  | { name: 'image_starts_with', alias?: string  } 
  | { name: 'image_not_starts_with', alias?: string  } 
  | { name: 'image_ends_with', alias?: string  } 
  | { name: 'image_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PackageUpdateManyWithWhereNestedInput {
  where?: PackageScalarWhereInput
  data?: PackageUpdateManyDataInput
}
export type PackageUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PackageUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PackageUpdateManyDataInput {
  name?: string | null
  description?: string | null
  price?: number | null
  image?: string | null
}
export type PackageUpdateManyDataInputInputObject =
  | Extract<keyof PackageUpdateManyDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface LeagueUpdateManyMutationInput {
  name?: string | null
  sport?: string | null
  seasonEndDate?: string | null
}
export type LeagueUpdateManyMutationInputInputObject =
  | Extract<keyof LeagueUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'sport', alias?: string  } 
  | { name: 'seasonEndDate', alias?: string  } 
  
export interface TeamUpdateInput {
  name?: string | null
  key?: string | null
  league?: LeagueUpdateOneRequiredWithoutTeamsInput | null
}
export type TeamUpdateInputInputObject =
  | Extract<keyof TeamUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  | { name: 'league', alias?: string  } 
  
export interface TeamUpdateManyMutationInput {
  name?: string | null
  key?: string | null
}
export type TeamUpdateManyMutationInputInputObject =
  | Extract<keyof TeamUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'key', alias?: string  } 
  
export interface PackageCreateInput {
  id?: string | null
  name?: string
  description?: string | null
  price?: number
  image?: string | null
  league?: LeagueCreateOneWithoutPackagesInput
  orderItems?: OrderItemCreateManyWithoutPackageInput | null
  predictions?: PredictionCreateManyWithoutPackageInput | null
}
export type PackageCreateInputInputObject =
  | Extract<keyof PackageCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'orderItems', alias?: string  } 
  | { name: 'predictions', alias?: string  } 
  
export interface PackageUpdateInput {
  name?: string | null
  description?: string | null
  price?: number | null
  image?: string | null
  league?: LeagueUpdateOneRequiredWithoutPackagesInput | null
  orderItems?: OrderItemUpdateManyWithoutPackageInput | null
  predictions?: PredictionUpdateManyWithoutPackageInput | null
}
export type PackageUpdateInputInputObject =
  | Extract<keyof PackageUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'orderItems', alias?: string  } 
  | { name: 'predictions', alias?: string  } 
  
export interface PackageUpdateManyMutationInput {
  name?: string | null
  description?: string | null
  price?: number | null
  image?: string | null
}
export type PackageUpdateManyMutationInputInputObject =
  | Extract<keyof PackageUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  
export interface OrderCreateInput {
  id?: string | null
  owner?: UserCreateOneWithoutOrdersInput
  items?: OrderItemCreateManyWithoutOrderInput | null
  stripeId?: string
  status?: prisma.OrderStatus | null
  totalPrice?: number
  totalRefunded?: number
}
export type OrderCreateInputInputObject =
  | Extract<keyof OrderCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface OrderUpdateInput {
  owner?: UserUpdateOneRequiredWithoutOrdersInput | null
  items?: OrderItemUpdateManyWithoutOrderInput | null
  stripeId?: string | null
  status?: prisma.OrderStatus | null
  totalPrice?: number | null
  totalRefunded?: number | null
}
export type OrderUpdateInputInputObject =
  | Extract<keyof OrderUpdateInput, string>
  | { name: 'owner', alias?: string  } 
  | { name: 'items', alias?: string  } 
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface OrderUpdateManyMutationInput {
  stripeId?: string | null
  status?: prisma.OrderStatus | null
  totalPrice?: number | null
  totalRefunded?: number | null
}
export type OrderUpdateManyMutationInputInputObject =
  | Extract<keyof OrderUpdateManyMutationInput, string>
  | { name: 'stripeId', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'totalPrice', alias?: string  } 
  | { name: 'totalRefunded', alias?: string  } 
  
export interface OrderItemCreateInput {
  id?: string | null
  expireAt?: string
  owner?: UserCreateOneWithoutCartInput | null
  order?: OrderCreateOneWithoutItemsInput | null
  package?: PackageCreateOneWithoutOrderItemsInput
}
export type OrderItemCreateInputInputObject =
  | Extract<keyof OrderItemCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'expireAt', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'package', alias?: string  } 
  
export interface OrderItemUpdateInput {
  expireAt?: string | null
  owner?: UserUpdateOneWithoutCartInput | null
  order?: OrderUpdateOneWithoutItemsInput | null
  package?: PackageUpdateOneRequiredWithoutOrderItemsInput | null
}
export type OrderItemUpdateInputInputObject =
  | Extract<keyof OrderItemUpdateInput, string>
  | { name: 'expireAt', alias?: string  } 
  | { name: 'owner', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'package', alias?: string  } 
  
export interface OrderItemUpdateManyMutationInput {
  expireAt?: string | null
}
export type OrderItemUpdateManyMutationInputInputObject =
  | Extract<keyof OrderItemUpdateManyMutationInput, string>
  | { name: 'expireAt', alias?: string  } 
  
export interface UserCreateInput {
  id?: string | null
  email?: string
  phone?: string
  password?: string
  cart?: OrderItemCreateManyWithoutOwnerInput | null
  orders?: OrderCreateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  notificationSettings?: NotificationSettingsCreateOneWithoutUserInput
}
export type UserCreateInputInputObject =
  | Extract<keyof UserCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  | { name: 'orders', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'notificationSettings', alias?: string  } 
  
export interface UserUpdateInput {
  email?: string | null
  phone?: string | null
  password?: string | null
  cart?: OrderItemUpdateManyWithoutOwnerInput | null
  orders?: OrderUpdateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
  notificationSettings?: NotificationSettingsUpdateOneRequiredWithoutUserInput | null
}
export type UserUpdateInputInputObject =
  | Extract<keyof UserUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  | { name: 'orders', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  | { name: 'notificationSettings', alias?: string  } 
  
export interface UserUpdateManyMutationInput {
  email?: string | null
  phone?: string | null
  password?: string | null
  role?: prisma.Role | null
  resetToken?: string | null
}
export type UserUpdateManyMutationInputInputObject =
  | Extract<keyof UserUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  
export interface NotificationSettingsCreateInput {
  id?: string | null
  email?: boolean | null
  phone?: boolean | null
  user?: UserCreateOneWithoutNotificationSettingsInput | null
}
export type NotificationSettingsCreateInputInputObject =
  | Extract<keyof NotificationSettingsCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserCreateOneWithoutNotificationSettingsInput {
  create?: UserCreateWithoutNotificationSettingsInput | null
  connect?: UserWhereUniqueInput | null
}
export type UserCreateOneWithoutNotificationSettingsInputInputObject =
  | Extract<keyof UserCreateOneWithoutNotificationSettingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserCreateWithoutNotificationSettingsInput {
  id?: string | null
  email?: string
  phone?: string
  password?: string
  cart?: OrderItemCreateManyWithoutOwnerInput | null
  orders?: OrderCreateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
}
export type UserCreateWithoutNotificationSettingsInputInputObject =
  | Extract<keyof UserCreateWithoutNotificationSettingsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  | { name: 'orders', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  
export interface NotificationSettingsUpdateInput {
  email?: boolean | null
  phone?: boolean | null
  user?: UserUpdateOneWithoutNotificationSettingsInput | null
}
export type NotificationSettingsUpdateInputInputObject =
  | Extract<keyof NotificationSettingsUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'user', alias?: string  } 
  
export interface UserUpdateOneWithoutNotificationSettingsInput {
  create?: UserCreateWithoutNotificationSettingsInput | null
  update?: UserUpdateWithoutNotificationSettingsDataInput | null
  upsert?: UserUpsertWithoutNotificationSettingsInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: UserWhereUniqueInput | null
}
export type UserUpdateOneWithoutNotificationSettingsInputInputObject =
  | Extract<keyof UserUpdateOneWithoutNotificationSettingsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserUpdateWithoutNotificationSettingsDataInput {
  email?: string | null
  phone?: string | null
  password?: string | null
  cart?: OrderItemUpdateManyWithoutOwnerInput | null
  orders?: OrderUpdateManyWithoutOwnerInput | null
  role?: prisma.Role | null
  resetToken?: string | null
}
export type UserUpdateWithoutNotificationSettingsDataInputInputObject =
  | Extract<keyof UserUpdateWithoutNotificationSettingsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'cart', alias?: string  } 
  | { name: 'orders', alias?: string  } 
  | { name: 'role', alias?: string  } 
  | { name: 'resetToken', alias?: string  } 
  
export interface UserUpsertWithoutNotificationSettingsInput {
  update?: UserUpdateWithoutNotificationSettingsDataInput
  create?: UserCreateWithoutNotificationSettingsInput
}
export type UserUpsertWithoutNotificationSettingsInputInputObject =
  | Extract<keyof UserUpsertWithoutNotificationSettingsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface NotificationSettingsUpdateManyMutationInput {
  email?: boolean | null
  phone?: boolean | null
}
export type NotificationSettingsUpdateManyMutationInputInputObject =
  | Extract<keyof NotificationSettingsUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'phone', alias?: string  } 
  
export interface PredictionCreateInput {
  id?: string | null
  startDate?: string
  package?: PackageCreateOneWithoutPredictionsInput
  name?: string
  home?: TeamCreateOneInput
  away?: TeamCreateOneInput
  winner?: TeamCreateOneInput
}
export type PredictionCreateInputInputObject =
  | Extract<keyof PredictionCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'package', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'home', alias?: string  } 
  | { name: 'away', alias?: string  } 
  | { name: 'winner', alias?: string  } 
  
export interface PackageCreateOneWithoutPredictionsInput {
  create?: PackageCreateWithoutPredictionsInput | null
  connect?: PackageWhereUniqueInput | null
}
export type PackageCreateOneWithoutPredictionsInputInputObject =
  | Extract<keyof PackageCreateOneWithoutPredictionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PackageCreateWithoutPredictionsInput {
  id?: string | null
  name?: string
  description?: string | null
  price?: number
  image?: string | null
  league?: LeagueCreateOneWithoutPackagesInput
  orderItems?: OrderItemCreateManyWithoutPackageInput | null
}
export type PackageCreateWithoutPredictionsInputInputObject =
  | Extract<keyof PackageCreateWithoutPredictionsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'orderItems', alias?: string  } 
  
export interface PredictionUpdateInput {
  startDate?: string | null
  package?: PackageUpdateOneRequiredWithoutPredictionsInput | null
  name?: string | null
  home?: TeamUpdateOneRequiredInput | null
  away?: TeamUpdateOneRequiredInput | null
  winner?: TeamUpdateOneRequiredInput | null
}
export type PredictionUpdateInputInputObject =
  | Extract<keyof PredictionUpdateInput, string>
  | { name: 'startDate', alias?: string  } 
  | { name: 'package', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'home', alias?: string  } 
  | { name: 'away', alias?: string  } 
  | { name: 'winner', alias?: string  } 
  
export interface PackageUpdateOneRequiredWithoutPredictionsInput {
  create?: PackageCreateWithoutPredictionsInput | null
  update?: PackageUpdateWithoutPredictionsDataInput | null
  upsert?: PackageUpsertWithoutPredictionsInput | null
  connect?: PackageWhereUniqueInput | null
}
export type PackageUpdateOneRequiredWithoutPredictionsInputInputObject =
  | Extract<keyof PackageUpdateOneRequiredWithoutPredictionsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PackageUpdateWithoutPredictionsDataInput {
  name?: string | null
  description?: string | null
  price?: number | null
  image?: string | null
  league?: LeagueUpdateOneRequiredWithoutPackagesInput | null
  orderItems?: OrderItemUpdateManyWithoutPackageInput | null
}
export type PackageUpdateWithoutPredictionsDataInputInputObject =
  | Extract<keyof PackageUpdateWithoutPredictionsDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'description', alias?: string  } 
  | { name: 'price', alias?: string  } 
  | { name: 'image', alias?: string  } 
  | { name: 'league', alias?: string  } 
  | { name: 'orderItems', alias?: string  } 
  
export interface PackageUpsertWithoutPredictionsInput {
  update?: PackageUpdateWithoutPredictionsDataInput
  create?: PackageCreateWithoutPredictionsInput
}
export type PackageUpsertWithoutPredictionsInputInputObject =
  | Extract<keyof PackageUpsertWithoutPredictionsInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PredictionUpdateManyMutationInput {
  startDate?: string | null
  name?: string | null
}
export type PredictionUpdateManyMutationInputInputObject =
  | Extract<keyof PredictionUpdateManyMutationInput, string>
  | { name: 'startDate', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface LeagueSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: LeagueWhereInput | null
  AND?: LeagueSubscriptionWhereInput[]
  OR?: LeagueSubscriptionWhereInput[]
  NOT?: LeagueSubscriptionWhereInput[]
}
export type LeagueSubscriptionWhereInputInputObject =
  | Extract<keyof LeagueSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TeamWhereInput | null
  AND?: TeamSubscriptionWhereInput[]
  OR?: TeamSubscriptionWhereInput[]
  NOT?: TeamSubscriptionWhereInput[]
}
export type TeamSubscriptionWhereInputInputObject =
  | Extract<keyof TeamSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PackageSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PackageWhereInput | null
  AND?: PackageSubscriptionWhereInput[]
  OR?: PackageSubscriptionWhereInput[]
  NOT?: PackageSubscriptionWhereInput[]
}
export type PackageSubscriptionWhereInputInputObject =
  | Extract<keyof PackageSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrderWhereInput | null
  AND?: OrderSubscriptionWhereInput[]
  OR?: OrderSubscriptionWhereInput[]
  NOT?: OrderSubscriptionWhereInput[]
}
export type OrderSubscriptionWhereInputInputObject =
  | Extract<keyof OrderSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface OrderItemSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: OrderItemWhereInput | null
  AND?: OrderItemSubscriptionWhereInput[]
  OR?: OrderItemSubscriptionWhereInput[]
  NOT?: OrderItemSubscriptionWhereInput[]
}
export type OrderItemSubscriptionWhereInputInputObject =
  | Extract<keyof OrderItemSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserWhereInput | null
  AND?: UserSubscriptionWhereInput[]
  OR?: UserSubscriptionWhereInput[]
  NOT?: UserSubscriptionWhereInput[]
}
export type UserSubscriptionWhereInputInputObject =
  | Extract<keyof UserSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface NotificationSettingsSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: NotificationSettingsWhereInput | null
  AND?: NotificationSettingsSubscriptionWhereInput[]
  OR?: NotificationSettingsSubscriptionWhereInput[]
  NOT?: NotificationSettingsSubscriptionWhereInput[]
}
export type NotificationSettingsSubscriptionWhereInputInputObject =
  | Extract<keyof NotificationSettingsSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PredictionSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PredictionWhereInput | null
  AND?: PredictionSubscriptionWhereInput[]
  OR?: PredictionSubscriptionWhereInput[]
  NOT?: PredictionSubscriptionWhereInput[]
}
export type PredictionSubscriptionWhereInputInputObject =
  | Extract<keyof PredictionSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type OrderStatusValues =
  | 'SUBMITTED'
  | 'PAID'
  | 'PREPARED'
  | 'FAILED'
  | 'REFUNDED'
  
export type RoleValues =
  | 'ADMIN'
  | 'EDITOR'
  | 'USER'
  
export type PackageOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'description_ASC'
  | 'description_DESC'
  | 'price_ASC'
  | 'price_DESC'
  | 'image_ASC'
  | 'image_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OrderItemOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'expireAt_ASC'
  | 'expireAt_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type OrderOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'stripeId_ASC'
  | 'stripeId_DESC'
  | 'status_ASC'
  | 'status_DESC'
  | 'totalPrice_ASC'
  | 'totalPrice_DESC'
  | 'totalRefunded_ASC'
  | 'totalRefunded_DESC'
  
export type PredictionOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'startDate_ASC'
  | 'startDate_DESC'
  | 'name_ASC'
  | 'name_DESC'
  
export type TeamOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'key_ASC'
  | 'key_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type LeagueOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'sport_ASC'
  | 'sport_DESC'
  | 'seasonEndDate_ASC'
  | 'seasonEndDate_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'role_ASC'
  | 'role_DESC'
  | 'resetToken_ASC'
  | 'resetToken_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type NotificationSettingsOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'phone_ASC'
  | 'phone_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  