// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateLeague {
  count: Int!
}

type AggregateNotificationSettings {
  count: Int!
}

type AggregateOrder {
  count: Int!
}

type AggregateOrderItem {
  count: Int!
}

type AggregatePackage {
  count: Int!
}

type AggregatePrediction {
  count: Int!
}

type AggregateTeam {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type League {
  id: ID!
  name: String!
  sport: String!
  seasonEndDate: DateTime!
  packages(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Package!]
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team!]
}

type LeagueConnection {
  pageInfo: PageInfo!
  edges: [LeagueEdge]!
  aggregate: AggregateLeague!
}

input LeagueCreateInput {
  id: ID
  name: String!
  sport: String!
  seasonEndDate: DateTime!
  packages: PackageCreateManyWithoutLeagueInput
  teams: TeamCreateManyWithoutLeagueInput
}

input LeagueCreateOneWithoutPackagesInput {
  create: LeagueCreateWithoutPackagesInput
  connect: LeagueWhereUniqueInput
}

input LeagueCreateOneWithoutTeamsInput {
  create: LeagueCreateWithoutTeamsInput
  connect: LeagueWhereUniqueInput
}

input LeagueCreateWithoutPackagesInput {
  id: ID
  name: String!
  sport: String!
  seasonEndDate: DateTime!
  teams: TeamCreateManyWithoutLeagueInput
}

input LeagueCreateWithoutTeamsInput {
  id: ID
  name: String!
  sport: String!
  seasonEndDate: DateTime!
  packages: PackageCreateManyWithoutLeagueInput
}

type LeagueEdge {
  node: League!
  cursor: String!
}

enum LeagueOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  sport_ASC
  sport_DESC
  seasonEndDate_ASC
  seasonEndDate_DESC
}

type LeaguePreviousValues {
  id: ID!
  name: String!
  sport: String!
  seasonEndDate: DateTime!
}

type LeagueSubscriptionPayload {
  mutation: MutationType!
  node: League
  updatedFields: [String!]
  previousValues: LeaguePreviousValues
}

input LeagueSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LeagueWhereInput
  AND: [LeagueSubscriptionWhereInput!]
  OR: [LeagueSubscriptionWhereInput!]
  NOT: [LeagueSubscriptionWhereInput!]
}

input LeagueUpdateInput {
  name: String
  sport: String
  seasonEndDate: DateTime
  packages: PackageUpdateManyWithoutLeagueInput
  teams: TeamUpdateManyWithoutLeagueInput
}

input LeagueUpdateManyMutationInput {
  name: String
  sport: String
  seasonEndDate: DateTime
}

input LeagueUpdateOneRequiredWithoutPackagesInput {
  create: LeagueCreateWithoutPackagesInput
  update: LeagueUpdateWithoutPackagesDataInput
  upsert: LeagueUpsertWithoutPackagesInput
  connect: LeagueWhereUniqueInput
}

input LeagueUpdateOneRequiredWithoutTeamsInput {
  create: LeagueCreateWithoutTeamsInput
  update: LeagueUpdateWithoutTeamsDataInput
  upsert: LeagueUpsertWithoutTeamsInput
  connect: LeagueWhereUniqueInput
}

input LeagueUpdateWithoutPackagesDataInput {
  name: String
  sport: String
  seasonEndDate: DateTime
  teams: TeamUpdateManyWithoutLeagueInput
}

input LeagueUpdateWithoutTeamsDataInput {
  name: String
  sport: String
  seasonEndDate: DateTime
  packages: PackageUpdateManyWithoutLeagueInput
}

input LeagueUpsertWithoutPackagesInput {
  update: LeagueUpdateWithoutPackagesDataInput!
  create: LeagueCreateWithoutPackagesInput!
}

input LeagueUpsertWithoutTeamsInput {
  update: LeagueUpdateWithoutTeamsDataInput!
  create: LeagueCreateWithoutTeamsInput!
}

input LeagueWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  sport: String
  sport_not: String
  sport_in: [String!]
  sport_not_in: [String!]
  sport_lt: String
  sport_lte: String
  sport_gt: String
  sport_gte: String
  sport_contains: String
  sport_not_contains: String
  sport_starts_with: String
  sport_not_starts_with: String
  sport_ends_with: String
  sport_not_ends_with: String
  seasonEndDate: DateTime
  seasonEndDate_not: DateTime
  seasonEndDate_in: [DateTime!]
  seasonEndDate_not_in: [DateTime!]
  seasonEndDate_lt: DateTime
  seasonEndDate_lte: DateTime
  seasonEndDate_gt: DateTime
  seasonEndDate_gte: DateTime
  packages_every: PackageWhereInput
  packages_some: PackageWhereInput
  packages_none: PackageWhereInput
  teams_every: TeamWhereInput
  teams_some: TeamWhereInput
  teams_none: TeamWhereInput
  AND: [LeagueWhereInput!]
  OR: [LeagueWhereInput!]
  NOT: [LeagueWhereInput!]
}

input LeagueWhereUniqueInput {
  id: ID
  name: String
}

scalar Long

type Mutation {
  createLeague(data: LeagueCreateInput!): League!
  updateLeague(data: LeagueUpdateInput!, where: LeagueWhereUniqueInput!): League
  updateManyLeagues(data: LeagueUpdateManyMutationInput!, where: LeagueWhereInput): BatchPayload!
  upsertLeague(where: LeagueWhereUniqueInput!, create: LeagueCreateInput!, update: LeagueUpdateInput!): League!
  deleteLeague(where: LeagueWhereUniqueInput!): League
  deleteManyLeagues(where: LeagueWhereInput): BatchPayload!
  createNotificationSettings(data: NotificationSettingsCreateInput!): NotificationSettings!
  updateNotificationSettings(data: NotificationSettingsUpdateInput!, where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  updateManyNotificationSettingses(data: NotificationSettingsUpdateManyMutationInput!, where: NotificationSettingsWhereInput): BatchPayload!
  upsertNotificationSettings(where: NotificationSettingsWhereUniqueInput!, create: NotificationSettingsCreateInput!, update: NotificationSettingsUpdateInput!): NotificationSettings!
  deleteNotificationSettings(where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  deleteManyNotificationSettingses(where: NotificationSettingsWhereInput): BatchPayload!
  createOrder(data: OrderCreateInput!): Order!
  updateOrder(data: OrderUpdateInput!, where: OrderWhereUniqueInput!): Order
  updateManyOrders(data: OrderUpdateManyMutationInput!, where: OrderWhereInput): BatchPayload!
  upsertOrder(where: OrderWhereUniqueInput!, create: OrderCreateInput!, update: OrderUpdateInput!): Order!
  deleteOrder(where: OrderWhereUniqueInput!): Order
  deleteManyOrders(where: OrderWhereInput): BatchPayload!
  createOrderItem(data: OrderItemCreateInput!): OrderItem!
  updateOrderItem(data: OrderItemUpdateInput!, where: OrderItemWhereUniqueInput!): OrderItem
  updateManyOrderItems(data: OrderItemUpdateManyMutationInput!, where: OrderItemWhereInput): BatchPayload!
  upsertOrderItem(where: OrderItemWhereUniqueInput!, create: OrderItemCreateInput!, update: OrderItemUpdateInput!): OrderItem!
  deleteOrderItem(where: OrderItemWhereUniqueInput!): OrderItem
  deleteManyOrderItems(where: OrderItemWhereInput): BatchPayload!
  createPackage(data: PackageCreateInput!): Package!
  updatePackage(data: PackageUpdateInput!, where: PackageWhereUniqueInput!): Package
  updateManyPackages(data: PackageUpdateManyMutationInput!, where: PackageWhereInput): BatchPayload!
  upsertPackage(where: PackageWhereUniqueInput!, create: PackageCreateInput!, update: PackageUpdateInput!): Package!
  deletePackage(where: PackageWhereUniqueInput!): Package
  deleteManyPackages(where: PackageWhereInput): BatchPayload!
  createPrediction(data: PredictionCreateInput!): Prediction!
  updatePrediction(data: PredictionUpdateInput!, where: PredictionWhereUniqueInput!): Prediction
  updateManyPredictions(data: PredictionUpdateManyMutationInput!, where: PredictionWhereInput): BatchPayload!
  upsertPrediction(where: PredictionWhereUniqueInput!, create: PredictionCreateInput!, update: PredictionUpdateInput!): Prediction!
  deletePrediction(where: PredictionWhereUniqueInput!): Prediction
  deleteManyPredictions(where: PredictionWhereInput): BatchPayload!
  createTeam(data: TeamCreateInput!): Team!
  updateTeam(data: TeamUpdateInput!, where: TeamWhereUniqueInput!): Team
  updateManyTeams(data: TeamUpdateManyMutationInput!, where: TeamWhereInput): BatchPayload!
  upsertTeam(where: TeamWhereUniqueInput!, create: TeamCreateInput!, update: TeamUpdateInput!): Team!
  deleteTeam(where: TeamWhereUniqueInput!): Team
  deleteManyTeams(where: TeamWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type NotificationSettings {
  id: ID!
  email: Boolean!
  phone: Boolean!
  user: User
}

type NotificationSettingsConnection {
  pageInfo: PageInfo!
  edges: [NotificationSettingsEdge]!
  aggregate: AggregateNotificationSettings!
}

input NotificationSettingsCreateInput {
  id: ID
  email: Boolean
  phone: Boolean
  user: UserCreateOneWithoutNotificationSettingsInput
}

input NotificationSettingsCreateOneWithoutUserInput {
  create: NotificationSettingsCreateWithoutUserInput
  connect: NotificationSettingsWhereUniqueInput
}

input NotificationSettingsCreateWithoutUserInput {
  id: ID
  email: Boolean
  phone: Boolean
}

type NotificationSettingsEdge {
  node: NotificationSettings!
  cursor: String!
}

enum NotificationSettingsOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
}

type NotificationSettingsPreviousValues {
  id: ID!
  email: Boolean!
  phone: Boolean!
}

type NotificationSettingsSubscriptionPayload {
  mutation: MutationType!
  node: NotificationSettings
  updatedFields: [String!]
  previousValues: NotificationSettingsPreviousValues
}

input NotificationSettingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationSettingsWhereInput
  AND: [NotificationSettingsSubscriptionWhereInput!]
  OR: [NotificationSettingsSubscriptionWhereInput!]
  NOT: [NotificationSettingsSubscriptionWhereInput!]
}

input NotificationSettingsUpdateInput {
  email: Boolean
  phone: Boolean
  user: UserUpdateOneWithoutNotificationSettingsInput
}

input NotificationSettingsUpdateManyMutationInput {
  email: Boolean
  phone: Boolean
}

input NotificationSettingsUpdateOneRequiredWithoutUserInput {
  create: NotificationSettingsCreateWithoutUserInput
  update: NotificationSettingsUpdateWithoutUserDataInput
  upsert: NotificationSettingsUpsertWithoutUserInput
  connect: NotificationSettingsWhereUniqueInput
}

input NotificationSettingsUpdateWithoutUserDataInput {
  email: Boolean
  phone: Boolean
}

input NotificationSettingsUpsertWithoutUserInput {
  update: NotificationSettingsUpdateWithoutUserDataInput!
  create: NotificationSettingsCreateWithoutUserInput!
}

input NotificationSettingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: Boolean
  email_not: Boolean
  phone: Boolean
  phone_not: Boolean
  user: UserWhereInput
  AND: [NotificationSettingsWhereInput!]
  OR: [NotificationSettingsWhereInput!]
  NOT: [NotificationSettingsWhereInput!]
}

input NotificationSettingsWhereUniqueInput {
  id: ID
}

type Order {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  owner: User!
  items(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  stripeId: String!
  status: OrderStatus!
  totalPrice: Float!
  totalRefunded: Float!
}

type OrderConnection {
  pageInfo: PageInfo!
  edges: [OrderEdge]!
  aggregate: AggregateOrder!
}

input OrderCreateInput {
  id: ID
  owner: UserCreateOneWithoutOrdersInput!
  items: OrderItemCreateManyWithoutOrderInput
  stripeId: String!
  status: OrderStatus
  totalPrice: Float!
  totalRefunded: Float!
}

input OrderCreateManyWithoutOwnerInput {
  create: [OrderCreateWithoutOwnerInput!]
  connect: [OrderWhereUniqueInput!]
}

input OrderCreateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  connect: OrderWhereUniqueInput
}

input OrderCreateWithoutItemsInput {
  id: ID
  owner: UserCreateOneWithoutOrdersInput!
  stripeId: String!
  status: OrderStatus
  totalPrice: Float!
  totalRefunded: Float!
}

input OrderCreateWithoutOwnerInput {
  id: ID
  items: OrderItemCreateManyWithoutOrderInput
  stripeId: String!
  status: OrderStatus
  totalPrice: Float!
  totalRefunded: Float!
}

type OrderEdge {
  node: Order!
  cursor: String!
}

type OrderItem {
  id: ID!
  expireAt: DateTime!
  owner: User
  order: Order
  package: Package!
}

type OrderItemConnection {
  pageInfo: PageInfo!
  edges: [OrderItemEdge]!
  aggregate: AggregateOrderItem!
}

input OrderItemCreateInput {
  id: ID
  expireAt: DateTime!
  owner: UserCreateOneWithoutCartInput
  order: OrderCreateOneWithoutItemsInput
  package: PackageCreateOneWithoutOrderItemsInput!
}

input OrderItemCreateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemCreateManyWithoutOwnerInput {
  create: [OrderItemCreateWithoutOwnerInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemCreateManyWithoutPackageInput {
  create: [OrderItemCreateWithoutPackageInput!]
  connect: [OrderItemWhereUniqueInput!]
}

input OrderItemCreateWithoutOrderInput {
  id: ID
  expireAt: DateTime!
  owner: UserCreateOneWithoutCartInput
  package: PackageCreateOneWithoutOrderItemsInput!
}

input OrderItemCreateWithoutOwnerInput {
  id: ID
  expireAt: DateTime!
  order: OrderCreateOneWithoutItemsInput
  package: PackageCreateOneWithoutOrderItemsInput!
}

input OrderItemCreateWithoutPackageInput {
  id: ID
  expireAt: DateTime!
  owner: UserCreateOneWithoutCartInput
  order: OrderCreateOneWithoutItemsInput
}

type OrderItemEdge {
  node: OrderItem!
  cursor: String!
}

enum OrderItemOrderByInput {
  id_ASC
  id_DESC
  expireAt_ASC
  expireAt_DESC
}

type OrderItemPreviousValues {
  id: ID!
  expireAt: DateTime!
}

input OrderItemScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  expireAt: DateTime
  expireAt_not: DateTime
  expireAt_in: [DateTime!]
  expireAt_not_in: [DateTime!]
  expireAt_lt: DateTime
  expireAt_lte: DateTime
  expireAt_gt: DateTime
  expireAt_gte: DateTime
  AND: [OrderItemScalarWhereInput!]
  OR: [OrderItemScalarWhereInput!]
  NOT: [OrderItemScalarWhereInput!]
}

type OrderItemSubscriptionPayload {
  mutation: MutationType!
  node: OrderItem
  updatedFields: [String!]
  previousValues: OrderItemPreviousValues
}

input OrderItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderItemWhereInput
  AND: [OrderItemSubscriptionWhereInput!]
  OR: [OrderItemSubscriptionWhereInput!]
  NOT: [OrderItemSubscriptionWhereInput!]
}

input OrderItemUpdateInput {
  expireAt: DateTime
  owner: UserUpdateOneWithoutCartInput
  order: OrderUpdateOneWithoutItemsInput
  package: PackageUpdateOneRequiredWithoutOrderItemsInput
}

input OrderItemUpdateManyDataInput {
  expireAt: DateTime
}

input OrderItemUpdateManyMutationInput {
  expireAt: DateTime
}

input OrderItemUpdateManyWithoutOrderInput {
  create: [OrderItemCreateWithoutOrderInput!]
  delete: [OrderItemWhereUniqueInput!]
  connect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOrderInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOrderInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
}

input OrderItemUpdateManyWithoutOwnerInput {
  create: [OrderItemCreateWithoutOwnerInput!]
  delete: [OrderItemWhereUniqueInput!]
  connect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
}

input OrderItemUpdateManyWithoutPackageInput {
  create: [OrderItemCreateWithoutPackageInput!]
  delete: [OrderItemWhereUniqueInput!]
  connect: [OrderItemWhereUniqueInput!]
  set: [OrderItemWhereUniqueInput!]
  disconnect: [OrderItemWhereUniqueInput!]
  update: [OrderItemUpdateWithWhereUniqueWithoutPackageInput!]
  upsert: [OrderItemUpsertWithWhereUniqueWithoutPackageInput!]
  deleteMany: [OrderItemScalarWhereInput!]
  updateMany: [OrderItemUpdateManyWithWhereNestedInput!]
}

input OrderItemUpdateManyWithWhereNestedInput {
  where: OrderItemScalarWhereInput!
  data: OrderItemUpdateManyDataInput!
}

input OrderItemUpdateWithoutOrderDataInput {
  expireAt: DateTime
  owner: UserUpdateOneWithoutCartInput
  package: PackageUpdateOneRequiredWithoutOrderItemsInput
}

input OrderItemUpdateWithoutOwnerDataInput {
  expireAt: DateTime
  order: OrderUpdateOneWithoutItemsInput
  package: PackageUpdateOneRequiredWithoutOrderItemsInput
}

input OrderItemUpdateWithoutPackageDataInput {
  expireAt: DateTime
  owner: UserUpdateOneWithoutCartInput
  order: OrderUpdateOneWithoutItemsInput
}

input OrderItemUpdateWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateWithoutOrderDataInput!
}

input OrderItemUpdateWithWhereUniqueWithoutOwnerInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateWithoutOwnerDataInput!
}

input OrderItemUpdateWithWhereUniqueWithoutPackageInput {
  where: OrderItemWhereUniqueInput!
  data: OrderItemUpdateWithoutPackageDataInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOrderInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateWithoutOrderDataInput!
  create: OrderItemCreateWithoutOrderInput!
}

input OrderItemUpsertWithWhereUniqueWithoutOwnerInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateWithoutOwnerDataInput!
  create: OrderItemCreateWithoutOwnerInput!
}

input OrderItemUpsertWithWhereUniqueWithoutPackageInput {
  where: OrderItemWhereUniqueInput!
  update: OrderItemUpdateWithoutPackageDataInput!
  create: OrderItemCreateWithoutPackageInput!
}

input OrderItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  expireAt: DateTime
  expireAt_not: DateTime
  expireAt_in: [DateTime!]
  expireAt_not_in: [DateTime!]
  expireAt_lt: DateTime
  expireAt_lte: DateTime
  expireAt_gt: DateTime
  expireAt_gte: DateTime
  owner: UserWhereInput
  order: OrderWhereInput
  package: PackageWhereInput
  AND: [OrderItemWhereInput!]
  OR: [OrderItemWhereInput!]
  NOT: [OrderItemWhereInput!]
}

input OrderItemWhereUniqueInput {
  id: ID
}

enum OrderOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  stripeId_ASC
  stripeId_DESC
  status_ASC
  status_DESC
  totalPrice_ASC
  totalPrice_DESC
  totalRefunded_ASC
  totalRefunded_DESC
}

type OrderPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  stripeId: String!
  status: OrderStatus!
  totalPrice: Float!
  totalRefunded: Float!
}

input OrderScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  stripeId: String
  stripeId_not: String
  stripeId_in: [String!]
  stripeId_not_in: [String!]
  stripeId_lt: String
  stripeId_lte: String
  stripeId_gt: String
  stripeId_gte: String
  stripeId_contains: String
  stripeId_not_contains: String
  stripeId_starts_with: String
  stripeId_not_starts_with: String
  stripeId_ends_with: String
  stripeId_not_ends_with: String
  status: OrderStatus
  status_not: OrderStatus
  status_in: [OrderStatus!]
  status_not_in: [OrderStatus!]
  totalPrice: Float
  totalPrice_not: Float
  totalPrice_in: [Float!]
  totalPrice_not_in: [Float!]
  totalPrice_lt: Float
  totalPrice_lte: Float
  totalPrice_gt: Float
  totalPrice_gte: Float
  totalRefunded: Float
  totalRefunded_not: Float
  totalRefunded_in: [Float!]
  totalRefunded_not_in: [Float!]
  totalRefunded_lt: Float
  totalRefunded_lte: Float
  totalRefunded_gt: Float
  totalRefunded_gte: Float
  AND: [OrderScalarWhereInput!]
  OR: [OrderScalarWhereInput!]
  NOT: [OrderScalarWhereInput!]
}

enum OrderStatus {
  SUBMITTED
  PAID
  PREPARED
  FAILED
  REFUNDED
}

type OrderSubscriptionPayload {
  mutation: MutationType!
  node: Order
  updatedFields: [String!]
  previousValues: OrderPreviousValues
}

input OrderSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: OrderWhereInput
  AND: [OrderSubscriptionWhereInput!]
  OR: [OrderSubscriptionWhereInput!]
  NOT: [OrderSubscriptionWhereInput!]
}

input OrderUpdateInput {
  owner: UserUpdateOneRequiredWithoutOrdersInput
  items: OrderItemUpdateManyWithoutOrderInput
  stripeId: String
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
}

input OrderUpdateManyDataInput {
  stripeId: String
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
}

input OrderUpdateManyMutationInput {
  stripeId: String
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
}

input OrderUpdateManyWithoutOwnerInput {
  create: [OrderCreateWithoutOwnerInput!]
  delete: [OrderWhereUniqueInput!]
  connect: [OrderWhereUniqueInput!]
  set: [OrderWhereUniqueInput!]
  disconnect: [OrderWhereUniqueInput!]
  update: [OrderUpdateWithWhereUniqueWithoutOwnerInput!]
  upsert: [OrderUpsertWithWhereUniqueWithoutOwnerInput!]
  deleteMany: [OrderScalarWhereInput!]
  updateMany: [OrderUpdateManyWithWhereNestedInput!]
}

input OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput!
  data: OrderUpdateManyDataInput!
}

input OrderUpdateOneWithoutItemsInput {
  create: OrderCreateWithoutItemsInput
  update: OrderUpdateWithoutItemsDataInput
  upsert: OrderUpsertWithoutItemsInput
  delete: Boolean
  disconnect: Boolean
  connect: OrderWhereUniqueInput
}

input OrderUpdateWithoutItemsDataInput {
  owner: UserUpdateOneRequiredWithoutOrdersInput
  stripeId: String
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
}

input OrderUpdateWithoutOwnerDataInput {
  items: OrderItemUpdateManyWithoutOrderInput
  stripeId: String
  status: OrderStatus
  totalPrice: Float
  totalRefunded: Float
}

input OrderUpdateWithWhereUniqueWithoutOwnerInput {
  where: OrderWhereUniqueInput!
  data: OrderUpdateWithoutOwnerDataInput!
}

input OrderUpsertWithoutItemsInput {
  update: OrderUpdateWithoutItemsDataInput!
  create: OrderCreateWithoutItemsInput!
}

input OrderUpsertWithWhereUniqueWithoutOwnerInput {
  where: OrderWhereUniqueInput!
  update: OrderUpdateWithoutOwnerDataInput!
  create: OrderCreateWithoutOwnerInput!
}

input OrderWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  owner: UserWhereInput
  items_every: OrderItemWhereInput
  items_some: OrderItemWhereInput
  items_none: OrderItemWhereInput
  stripeId: String
  stripeId_not: String
  stripeId_in: [String!]
  stripeId_not_in: [String!]
  stripeId_lt: String
  stripeId_lte: String
  stripeId_gt: String
  stripeId_gte: String
  stripeId_contains: String
  stripeId_not_contains: String
  stripeId_starts_with: String
  stripeId_not_starts_with: String
  stripeId_ends_with: String
  stripeId_not_ends_with: String
  status: OrderStatus
  status_not: OrderStatus
  status_in: [OrderStatus!]
  status_not_in: [OrderStatus!]
  totalPrice: Float
  totalPrice_not: Float
  totalPrice_in: [Float!]
  totalPrice_not_in: [Float!]
  totalPrice_lt: Float
  totalPrice_lte: Float
  totalPrice_gt: Float
  totalPrice_gte: Float
  totalRefunded: Float
  totalRefunded_not: Float
  totalRefunded_in: [Float!]
  totalRefunded_not_in: [Float!]
  totalRefunded_lt: Float
  totalRefunded_lte: Float
  totalRefunded_gt: Float
  totalRefunded_gte: Float
  AND: [OrderWhereInput!]
  OR: [OrderWhereInput!]
  NOT: [OrderWhereInput!]
}

input OrderWhereUniqueInput {
  id: ID
}

type Package {
  id: ID!
  name: String!
  description: String
  price: Float!
  image: String
  league: League!
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  predictions(where: PredictionWhereInput, orderBy: PredictionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prediction!]
}

type PackageConnection {
  pageInfo: PageInfo!
  edges: [PackageEdge]!
  aggregate: AggregatePackage!
}

input PackageCreateInput {
  id: ID
  name: String!
  description: String
  price: Float!
  image: String
  league: LeagueCreateOneWithoutPackagesInput!
  orderItems: OrderItemCreateManyWithoutPackageInput
  predictions: PredictionCreateManyWithoutPackageInput
}

input PackageCreateManyWithoutLeagueInput {
  create: [PackageCreateWithoutLeagueInput!]
  connect: [PackageWhereUniqueInput!]
}

input PackageCreateOneWithoutOrderItemsInput {
  create: PackageCreateWithoutOrderItemsInput
  connect: PackageWhereUniqueInput
}

input PackageCreateOneWithoutPredictionsInput {
  create: PackageCreateWithoutPredictionsInput
  connect: PackageWhereUniqueInput
}

input PackageCreateWithoutLeagueInput {
  id: ID
  name: String!
  description: String
  price: Float!
  image: String
  orderItems: OrderItemCreateManyWithoutPackageInput
  predictions: PredictionCreateManyWithoutPackageInput
}

input PackageCreateWithoutOrderItemsInput {
  id: ID
  name: String!
  description: String
  price: Float!
  image: String
  league: LeagueCreateOneWithoutPackagesInput!
  predictions: PredictionCreateManyWithoutPackageInput
}

input PackageCreateWithoutPredictionsInput {
  id: ID
  name: String!
  description: String
  price: Float!
  image: String
  league: LeagueCreateOneWithoutPackagesInput!
  orderItems: OrderItemCreateManyWithoutPackageInput
}

type PackageEdge {
  node: Package!
  cursor: String!
}

enum PackageOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  price_ASC
  price_DESC
  image_ASC
  image_DESC
}

type PackagePreviousValues {
  id: ID!
  name: String!
  description: String
  price: Float!
  image: String
}

input PackageScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  AND: [PackageScalarWhereInput!]
  OR: [PackageScalarWhereInput!]
  NOT: [PackageScalarWhereInput!]
}

type PackageSubscriptionPayload {
  mutation: MutationType!
  node: Package
  updatedFields: [String!]
  previousValues: PackagePreviousValues
}

input PackageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PackageWhereInput
  AND: [PackageSubscriptionWhereInput!]
  OR: [PackageSubscriptionWhereInput!]
  NOT: [PackageSubscriptionWhereInput!]
}

input PackageUpdateInput {
  name: String
  description: String
  price: Float
  image: String
  league: LeagueUpdateOneRequiredWithoutPackagesInput
  orderItems: OrderItemUpdateManyWithoutPackageInput
  predictions: PredictionUpdateManyWithoutPackageInput
}

input PackageUpdateManyDataInput {
  name: String
  description: String
  price: Float
  image: String
}

input PackageUpdateManyMutationInput {
  name: String
  description: String
  price: Float
  image: String
}

input PackageUpdateManyWithoutLeagueInput {
  create: [PackageCreateWithoutLeagueInput!]
  delete: [PackageWhereUniqueInput!]
  connect: [PackageWhereUniqueInput!]
  set: [PackageWhereUniqueInput!]
  disconnect: [PackageWhereUniqueInput!]
  update: [PackageUpdateWithWhereUniqueWithoutLeagueInput!]
  upsert: [PackageUpsertWithWhereUniqueWithoutLeagueInput!]
  deleteMany: [PackageScalarWhereInput!]
  updateMany: [PackageUpdateManyWithWhereNestedInput!]
}

input PackageUpdateManyWithWhereNestedInput {
  where: PackageScalarWhereInput!
  data: PackageUpdateManyDataInput!
}

input PackageUpdateOneRequiredWithoutOrderItemsInput {
  create: PackageCreateWithoutOrderItemsInput
  update: PackageUpdateWithoutOrderItemsDataInput
  upsert: PackageUpsertWithoutOrderItemsInput
  connect: PackageWhereUniqueInput
}

input PackageUpdateOneRequiredWithoutPredictionsInput {
  create: PackageCreateWithoutPredictionsInput
  update: PackageUpdateWithoutPredictionsDataInput
  upsert: PackageUpsertWithoutPredictionsInput
  connect: PackageWhereUniqueInput
}

input PackageUpdateWithoutLeagueDataInput {
  name: String
  description: String
  price: Float
  image: String
  orderItems: OrderItemUpdateManyWithoutPackageInput
  predictions: PredictionUpdateManyWithoutPackageInput
}

input PackageUpdateWithoutOrderItemsDataInput {
  name: String
  description: String
  price: Float
  image: String
  league: LeagueUpdateOneRequiredWithoutPackagesInput
  predictions: PredictionUpdateManyWithoutPackageInput
}

input PackageUpdateWithoutPredictionsDataInput {
  name: String
  description: String
  price: Float
  image: String
  league: LeagueUpdateOneRequiredWithoutPackagesInput
  orderItems: OrderItemUpdateManyWithoutPackageInput
}

input PackageUpdateWithWhereUniqueWithoutLeagueInput {
  where: PackageWhereUniqueInput!
  data: PackageUpdateWithoutLeagueDataInput!
}

input PackageUpsertWithoutOrderItemsInput {
  update: PackageUpdateWithoutOrderItemsDataInput!
  create: PackageCreateWithoutOrderItemsInput!
}

input PackageUpsertWithoutPredictionsInput {
  update: PackageUpdateWithoutPredictionsDataInput!
  create: PackageCreateWithoutPredictionsInput!
}

input PackageUpsertWithWhereUniqueWithoutLeagueInput {
  where: PackageWhereUniqueInput!
  update: PackageUpdateWithoutLeagueDataInput!
  create: PackageCreateWithoutLeagueInput!
}

input PackageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  price: Float
  price_not: Float
  price_in: [Float!]
  price_not_in: [Float!]
  price_lt: Float
  price_lte: Float
  price_gt: Float
  price_gte: Float
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  league: LeagueWhereInput
  orderItems_every: OrderItemWhereInput
  orderItems_some: OrderItemWhereInput
  orderItems_none: OrderItemWhereInput
  predictions_every: PredictionWhereInput
  predictions_some: PredictionWhereInput
  predictions_none: PredictionWhereInput
  AND: [PackageWhereInput!]
  OR: [PackageWhereInput!]
  NOT: [PackageWhereInput!]
}

input PackageWhereUniqueInput {
  id: ID
  name: String
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Prediction {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startDate: DateTime!
  package: Package!
  name: String!
  home: Team!
  away: Team!
  winner: Team!
}

type PredictionConnection {
  pageInfo: PageInfo!
  edges: [PredictionEdge]!
  aggregate: AggregatePrediction!
}

input PredictionCreateInput {
  id: ID
  startDate: DateTime!
  package: PackageCreateOneWithoutPredictionsInput!
  name: String!
  home: TeamCreateOneInput!
  away: TeamCreateOneInput!
  winner: TeamCreateOneInput!
}

input PredictionCreateManyWithoutPackageInput {
  create: [PredictionCreateWithoutPackageInput!]
  connect: [PredictionWhereUniqueInput!]
}

input PredictionCreateWithoutPackageInput {
  id: ID
  startDate: DateTime!
  name: String!
  home: TeamCreateOneInput!
  away: TeamCreateOneInput!
  winner: TeamCreateOneInput!
}

type PredictionEdge {
  node: Prediction!
  cursor: String!
}

enum PredictionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  startDate_ASC
  startDate_DESC
  name_ASC
  name_DESC
}

type PredictionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  startDate: DateTime!
  name: String!
}

input PredictionScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [PredictionScalarWhereInput!]
  OR: [PredictionScalarWhereInput!]
  NOT: [PredictionScalarWhereInput!]
}

type PredictionSubscriptionPayload {
  mutation: MutationType!
  node: Prediction
  updatedFields: [String!]
  previousValues: PredictionPreviousValues
}

input PredictionSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PredictionWhereInput
  AND: [PredictionSubscriptionWhereInput!]
  OR: [PredictionSubscriptionWhereInput!]
  NOT: [PredictionSubscriptionWhereInput!]
}

input PredictionUpdateInput {
  startDate: DateTime
  package: PackageUpdateOneRequiredWithoutPredictionsInput
  name: String
  home: TeamUpdateOneRequiredInput
  away: TeamUpdateOneRequiredInput
  winner: TeamUpdateOneRequiredInput
}

input PredictionUpdateManyDataInput {
  startDate: DateTime
  name: String
}

input PredictionUpdateManyMutationInput {
  startDate: DateTime
  name: String
}

input PredictionUpdateManyWithoutPackageInput {
  create: [PredictionCreateWithoutPackageInput!]
  delete: [PredictionWhereUniqueInput!]
  connect: [PredictionWhereUniqueInput!]
  set: [PredictionWhereUniqueInput!]
  disconnect: [PredictionWhereUniqueInput!]
  update: [PredictionUpdateWithWhereUniqueWithoutPackageInput!]
  upsert: [PredictionUpsertWithWhereUniqueWithoutPackageInput!]
  deleteMany: [PredictionScalarWhereInput!]
  updateMany: [PredictionUpdateManyWithWhereNestedInput!]
}

input PredictionUpdateManyWithWhereNestedInput {
  where: PredictionScalarWhereInput!
  data: PredictionUpdateManyDataInput!
}

input PredictionUpdateWithoutPackageDataInput {
  startDate: DateTime
  name: String
  home: TeamUpdateOneRequiredInput
  away: TeamUpdateOneRequiredInput
  winner: TeamUpdateOneRequiredInput
}

input PredictionUpdateWithWhereUniqueWithoutPackageInput {
  where: PredictionWhereUniqueInput!
  data: PredictionUpdateWithoutPackageDataInput!
}

input PredictionUpsertWithWhereUniqueWithoutPackageInput {
  where: PredictionWhereUniqueInput!
  update: PredictionUpdateWithoutPackageDataInput!
  create: PredictionCreateWithoutPackageInput!
}

input PredictionWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  package: PackageWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  home: TeamWhereInput
  away: TeamWhereInput
  winner: TeamWhereInput
  AND: [PredictionWhereInput!]
  OR: [PredictionWhereInput!]
  NOT: [PredictionWhereInput!]
}

input PredictionWhereUniqueInput {
  id: ID
}

type Query {
  league(where: LeagueWhereUniqueInput!): League
  leagues(where: LeagueWhereInput, orderBy: LeagueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [League]!
  leaguesConnection(where: LeagueWhereInput, orderBy: LeagueOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LeagueConnection!
  notificationSettings(where: NotificationSettingsWhereUniqueInput!): NotificationSettings
  notificationSettingses(where: NotificationSettingsWhereInput, orderBy: NotificationSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [NotificationSettings]!
  notificationSettingsesConnection(where: NotificationSettingsWhereInput, orderBy: NotificationSettingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationSettingsConnection!
  order(where: OrderWhereUniqueInput!): Order
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order]!
  ordersConnection(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderConnection!
  orderItem(where: OrderItemWhereUniqueInput!): OrderItem
  orderItems(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem]!
  orderItemsConnection(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): OrderItemConnection!
  package(where: PackageWhereUniqueInput!): Package
  packages(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Package]!
  packagesConnection(where: PackageWhereInput, orderBy: PackageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PackageConnection!
  prediction(where: PredictionWhereUniqueInput!): Prediction
  predictions(where: PredictionWhereInput, orderBy: PredictionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Prediction]!
  predictionsConnection(where: PredictionWhereInput, orderBy: PredictionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PredictionConnection!
  team(where: TeamWhereUniqueInput!): Team
  teams(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Team]!
  teamsConnection(where: TeamWhereInput, orderBy: TeamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TeamConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

enum Role {
  ADMIN
  EDITOR
  USER
}

type Subscription {
  league(where: LeagueSubscriptionWhereInput): LeagueSubscriptionPayload
  notificationSettings(where: NotificationSettingsSubscriptionWhereInput): NotificationSettingsSubscriptionPayload
  order(where: OrderSubscriptionWhereInput): OrderSubscriptionPayload
  orderItem(where: OrderItemSubscriptionWhereInput): OrderItemSubscriptionPayload
  package(where: PackageSubscriptionWhereInput): PackageSubscriptionPayload
  prediction(where: PredictionSubscriptionWhereInput): PredictionSubscriptionPayload
  team(where: TeamSubscriptionWhereInput): TeamSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Team {
  id: ID!
  name: String!
  key: String!
  league: League!
}

type TeamConnection {
  pageInfo: PageInfo!
  edges: [TeamEdge]!
  aggregate: AggregateTeam!
}

input TeamCreateInput {
  id: ID
  name: String!
  key: String!
  league: LeagueCreateOneWithoutTeamsInput!
}

input TeamCreateManyWithoutLeagueInput {
  create: [TeamCreateWithoutLeagueInput!]
  connect: [TeamWhereUniqueInput!]
}

input TeamCreateOneInput {
  create: TeamCreateInput
  connect: TeamWhereUniqueInput
}

input TeamCreateWithoutLeagueInput {
  id: ID
  name: String!
  key: String!
}

type TeamEdge {
  node: Team!
  cursor: String!
}

enum TeamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  key_ASC
  key_DESC
}

type TeamPreviousValues {
  id: ID!
  name: String!
  key: String!
}

input TeamScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  AND: [TeamScalarWhereInput!]
  OR: [TeamScalarWhereInput!]
  NOT: [TeamScalarWhereInput!]
}

type TeamSubscriptionPayload {
  mutation: MutationType!
  node: Team
  updatedFields: [String!]
  previousValues: TeamPreviousValues
}

input TeamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TeamWhereInput
  AND: [TeamSubscriptionWhereInput!]
  OR: [TeamSubscriptionWhereInput!]
  NOT: [TeamSubscriptionWhereInput!]
}

input TeamUpdateDataInput {
  name: String
  key: String
  league: LeagueUpdateOneRequiredWithoutTeamsInput
}

input TeamUpdateInput {
  name: String
  key: String
  league: LeagueUpdateOneRequiredWithoutTeamsInput
}

input TeamUpdateManyDataInput {
  name: String
  key: String
}

input TeamUpdateManyMutationInput {
  name: String
  key: String
}

input TeamUpdateManyWithoutLeagueInput {
  create: [TeamCreateWithoutLeagueInput!]
  delete: [TeamWhereUniqueInput!]
  connect: [TeamWhereUniqueInput!]
  set: [TeamWhereUniqueInput!]
  disconnect: [TeamWhereUniqueInput!]
  update: [TeamUpdateWithWhereUniqueWithoutLeagueInput!]
  upsert: [TeamUpsertWithWhereUniqueWithoutLeagueInput!]
  deleteMany: [TeamScalarWhereInput!]
  updateMany: [TeamUpdateManyWithWhereNestedInput!]
}

input TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput!
  data: TeamUpdateManyDataInput!
}

input TeamUpdateOneRequiredInput {
  create: TeamCreateInput
  update: TeamUpdateDataInput
  upsert: TeamUpsertNestedInput
  connect: TeamWhereUniqueInput
}

input TeamUpdateWithoutLeagueDataInput {
  name: String
  key: String
}

input TeamUpdateWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput!
  data: TeamUpdateWithoutLeagueDataInput!
}

input TeamUpsertNestedInput {
  update: TeamUpdateDataInput!
  create: TeamCreateInput!
}

input TeamUpsertWithWhereUniqueWithoutLeagueInput {
  where: TeamWhereUniqueInput!
  update: TeamUpdateWithoutLeagueDataInput!
  create: TeamCreateWithoutLeagueInput!
}

input TeamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  key: String
  key_not: String
  key_in: [String!]
  key_not_in: [String!]
  key_lt: String
  key_lte: String
  key_gt: String
  key_gte: String
  key_contains: String
  key_not_contains: String
  key_starts_with: String
  key_not_starts_with: String
  key_ends_with: String
  key_not_ends_with: String
  league: LeagueWhereInput
  AND: [TeamWhereInput!]
  OR: [TeamWhereInput!]
  NOT: [TeamWhereInput!]
}

input TeamWhereUniqueInput {
  id: ID
  name: String
  key: String
}

type User {
  id: ID!
  email: String!
  phone: String!
  password: String!
  cart(where: OrderItemWhereInput, orderBy: OrderItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [OrderItem!]
  orders(where: OrderWhereInput, orderBy: OrderOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Order!]
  role: Role
  resetToken: String
  notificationSettings: NotificationSettings!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  phone: String!
  password: String!
  cart: OrderItemCreateManyWithoutOwnerInput
  orders: OrderCreateManyWithoutOwnerInput
  role: Role
  resetToken: String
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput!
}

input UserCreateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationSettingsInput {
  create: UserCreateWithoutNotificationSettingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutCartInput {
  id: ID
  email: String!
  phone: String!
  password: String!
  orders: OrderCreateManyWithoutOwnerInput
  role: Role
  resetToken: String
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput!
}

input UserCreateWithoutNotificationSettingsInput {
  id: ID
  email: String!
  phone: String!
  password: String!
  cart: OrderItemCreateManyWithoutOwnerInput
  orders: OrderCreateManyWithoutOwnerInput
  role: Role
  resetToken: String
}

input UserCreateWithoutOrdersInput {
  id: ID
  email: String!
  phone: String!
  password: String!
  cart: OrderItemCreateManyWithoutOwnerInput
  role: Role
  resetToken: String
  notificationSettings: NotificationSettingsCreateOneWithoutUserInput!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  phone_ASC
  phone_DESC
  password_ASC
  password_DESC
  role_ASC
  role_DESC
  resetToken_ASC
  resetToken_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  phone: String!
  password: String!
  role: Role
  resetToken: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  phone: String
  password: String
  cart: OrderItemUpdateManyWithoutOwnerInput
  orders: OrderUpdateManyWithoutOwnerInput
  role: Role
  resetToken: String
  notificationSettings: NotificationSettingsUpdateOneRequiredWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: String
  phone: String
  password: String
  role: Role
  resetToken: String
}

input UserUpdateOneRequiredWithoutOrdersInput {
  create: UserCreateWithoutOrdersInput
  update: UserUpdateWithoutOrdersDataInput
  upsert: UserUpsertWithoutOrdersInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutCartInput {
  create: UserCreateWithoutCartInput
  update: UserUpdateWithoutCartDataInput
  upsert: UserUpsertWithoutCartInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateOneWithoutNotificationSettingsInput {
  create: UserCreateWithoutNotificationSettingsInput
  update: UserUpdateWithoutNotificationSettingsDataInput
  upsert: UserUpsertWithoutNotificationSettingsInput
  delete: Boolean
  disconnect: Boolean
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutCartDataInput {
  email: String
  phone: String
  password: String
  orders: OrderUpdateManyWithoutOwnerInput
  role: Role
  resetToken: String
  notificationSettings: NotificationSettingsUpdateOneRequiredWithoutUserInput
}

input UserUpdateWithoutNotificationSettingsDataInput {
  email: String
  phone: String
  password: String
  cart: OrderItemUpdateManyWithoutOwnerInput
  orders: OrderUpdateManyWithoutOwnerInput
  role: Role
  resetToken: String
}

input UserUpdateWithoutOrdersDataInput {
  email: String
  phone: String
  password: String
  cart: OrderItemUpdateManyWithoutOwnerInput
  role: Role
  resetToken: String
  notificationSettings: NotificationSettingsUpdateOneRequiredWithoutUserInput
}

input UserUpsertWithoutCartInput {
  update: UserUpdateWithoutCartDataInput!
  create: UserCreateWithoutCartInput!
}

input UserUpsertWithoutNotificationSettingsInput {
  update: UserUpdateWithoutNotificationSettingsDataInput!
  create: UserCreateWithoutNotificationSettingsInput!
}

input UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput!
  create: UserCreateWithoutOrdersInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  cart_every: OrderItemWhereInput
  cart_some: OrderItemWhereInput
  cart_none: OrderItemWhereInput
  orders_every: OrderWhereInput
  orders_some: OrderWhereInput
  orders_none: OrderWhereInput
  role: Role
  role_not: Role
  role_in: [Role!]
  role_not_in: [Role!]
  resetToken: String
  resetToken_not: String
  resetToken_in: [String!]
  resetToken_not_in: [String!]
  resetToken_lt: String
  resetToken_lte: String
  resetToken_gt: String
  resetToken_gte: String
  resetToken_contains: String
  resetToken_not_contains: String
  resetToken_starts_with: String
  resetToken_not_starts_with: String
  resetToken_ends_with: String
  resetToken_not_ends_with: String
  notificationSettings: NotificationSettingsWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}
`